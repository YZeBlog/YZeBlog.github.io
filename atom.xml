<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦泽念季夏</title>
  
  <subtitle>季夏鸣蝉如歌</subtitle>
  <link href="https://yzeblog.dev.tc/atom.xml" rel="self"/>
  
  <link href="https://yzeblog.dev.tc/"/>
  <updated>2025-02-06T11:25:40.144Z</updated>
  <id>https://yzeblog.dev.tc/</id>
  
  <author>
    <name>梦泽</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git后悔药大全</title>
    <link href="https://yzeblog.dev.tc/16.html"/>
    <id>https://yzeblog.dev.tc/16.html</id>
    <published>2025-02-06T11:24:24.000Z</published>
    <updated>2025-02-06T11:25:40.144Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发中，Git 已经成为不可或缺的版本控制工具，但它也时常让人感到“后悔”。无论是误操作、分支混乱还是合并灾难，每个开发者都有过那种“如果能回到过去，我绝不会那样做”的时刻。本文将整理一些常见的 Git 后悔时刻以及对应的“后悔药”——解决方案和预防措施，助你在 Git 的世界里少走弯路，多点从容。</p><h2 id="误操作后悔药"><a href="#误操作后悔药" class="headerlink" title="误操作后悔药"></a>误操作后悔药</h2><h3 id="错误的-commit-到错误分支"><a href="#错误的-commit-到错误分支" class="headerlink" title="错误的 commit 到错误分支"></a>错误的 commit 到错误分支</h3><p><strong>问题描述</strong>：你在 feature 分支上完成了开发，却不小心提交到了 master 分支，或者反之。<br><strong>解决方案</strong>：  </p><ul><li><p><strong>使用 <code>git cherry-pick</code></strong>：找到错误提交的 commit id，然后在正确的分支上 cherry-pick 到对应的提交记录。  </p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到正确分支</span></span><br><span class="line">git checkout feature-branch</span><br><span class="line"><span class="comment"># 将错误分支上的 commit 应用到当前分支</span></span><br><span class="line">git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure></div></li><li><p><strong>重置错误分支</strong>：在错误分支上执行 <code>git reset --hard HEAD~1</code> 或者用 reflog 找到错误前的状态，再强制推送（注意与团队沟通）。</p><blockquote><p><strong>提示</strong>：重置分支后，如果该分支已推送到远程仓库，请务必通知团队，避免他人工作受到影响。</p></blockquote></li></ul><h3 id="误删分支或-commit"><a href="#误删分支或-commit" class="headerlink" title="误删分支或 commit"></a>误删分支或 commit</h3><p><strong>问题描述</strong>：误操作导致分支或 commit 被删除，感觉代码一去不复返。<br><strong>解决方案</strong>：  </p><ul><li><strong>利用 Git Reflog</strong>：Git 会记录每一次 HEAD 的移动，使用 <code>git reflog</code> 可以找到删除前的 commit id，然后用 <code>git checkout -b &lt;new-branch&gt; &lt;commit-id&gt;</code> 恢复分支。  <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line"><span class="comment"># 找到误删前的 commit-id</span></span><br><span class="line">git checkout -b recovered-branch &lt;commit-id&gt;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="强制推送导致问题"><a href="#强制推送导致问题" class="headerlink" title="强制推送导致问题"></a>强制推送导致问题</h3><p><strong>问题描述</strong>：执行了 <code>git push --force</code> 后，覆盖了远程仓库的提交，导致他人的工作丢失。<br><strong>解决方案</strong>：  </p><ul><li><strong>尽快联系团队成员</strong>：在团队协作中，强制推送是一把“双刃剑”。如果发现错误，尽快与团队成员沟通，尝试通过备份记录（如本地分支、 reflog）恢复丢失的 commit。  </li><li><strong>使用 <code>git push --force-with-lease</code></strong>：这种方式可以在推送前检查远程仓库的状态，降低冲突风险。</li></ul><h2 id="分支管理后悔药"><a href="#分支管理后悔药" class="headerlink" title="分支管理后悔药"></a>分支管理后悔药</h2><h3 id="分支混乱无序"><a href="#分支混乱无序" class="headerlink" title="分支混乱无序"></a>分支混乱无序</h3><p><strong>问题描述</strong>：在多个分支间来回切换，缺乏良好的命名和管理，导致难以追踪和维护。<br><strong>解决方案</strong>：  </p><ul><li><strong>分支命名规范</strong>：制定团队内部的分支命名规则，比如 <code>feature/xxx</code>、<code>bugfix/xxx</code>、<code>hotfix/xxx</code> 等，有助于快速定位分支作用。  </li><li><strong>定期清理过期分支</strong>：使用 <code>git branch -D &lt;branch-name&gt;</code> 删除本地分支，远程分支可用 <code>git push origin --delete &lt;branch-name&gt;</code> 清理，保持仓库整洁。  </li><li><strong>使用 Git Flow 或其他工作流</strong>：这些工具和方法可以帮助你更好地管理分支，明确各分支的职责和生命周期。</li></ul><h3 id="合并冲突频发"><a href="#合并冲突频发" class="headerlink" title="合并冲突频发"></a>合并冲突频发</h3><p><strong>问题描述</strong>：多次合并导致冲突不断出现，甚至出现难以解决的冲突。<br><strong>解决方案</strong>：  </p><ul><li><strong>频繁同步和小步提交</strong>：保持分支间的同步可以减少大规模冲突的发生，建议经常将变更合并到主分支。  </li><li><strong>使用 rebase 代替 merge</strong>：对于一些线性开发的场景，可以考虑用 <code>git rebase</code> 代替合并，这样可以保持干净的提交历史。  <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 feature 分支上，先更新 master 分支</span></span><br><span class="line">git checkout feature-branch</span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="历史修改后悔药"><a href="#历史修改后悔药" class="headerlink" title="历史修改后悔药"></a>历史修改后悔药</h2><h3 id="误改历史记录"><a href="#误改历史记录" class="headerlink" title="误改历史记录"></a>误改历史记录</h3><p><strong>问题描述</strong>：你在 commit 历史中犯了错误，需要修改老 commit 信息或者删除敏感数据。<br><strong>解决方案</strong>：  </p><ul><li><strong>使用 Interactive Rebase</strong>：<code>git rebase -i &lt;base&gt;</code> 允许你交互式编辑多个 commit，可以修改、合并或删除 commit。  <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~5</span><br></pre></td></tr></table></figure></div></li><li><strong>过滤敏感信息</strong>：若历史中包含敏感数据，可以使用工具如 <a class="link"   href="https://rtyley.github.io/bfg-repo-cleaner/" >BFG Repo-Cleaner<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 来批量清理，然后强制推送到远程仓库。</li></ul><h3 id="回滚到稳定状态"><a href="#回滚到稳定状态" class="headerlink" title="回滚到稳定状态"></a>回滚到稳定状态</h3><p><strong>问题描述</strong>：新功能引入问题，需要回退到上一个稳定的版本。<br><strong>解决方案</strong>：  </p><ul><li><strong>使用 <code>git revert</code></strong>：生成一个新的 commit 来撤销错误提交，不改变历史记录，适合公共分支。  <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure></div></li><li><strong>使用 <code>git reset</code></strong>：在本地历史回退到特定 commit，但若该 commit 已推送，需谨慎使用并与团队协商。</li></ul><h2 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a>预防措施</h2><p>预防总比事后补救好，以下几点建议可以帮助你降低犯错概率：</p><ol><li><strong>多做备份</strong>：养成在做重大修改前创建分支或打 tag 的习惯。  </li><li><strong>代码评审</strong>：在合并前进行代码审查，及时发现并纠正潜在错误。  </li><li><strong>自动化测试和 CI&#x2F;CD</strong>：通过自动化工具确保每次提交的稳定性，减少因代码错误引起的混乱。  </li><li><strong>学习 Git 高级用法</strong>：熟悉 <code>reflog</code>、<code>stash</code>、<code>bisect</code> 等工具，能在遇到问题时迅速定位和恢复。  </li><li><strong>团队沟通</strong>：尤其在执行 <code>push --force</code> 或重写历史时，务必与团队成员保持同步，确保不影响他人工作。</li></ol><p>Git 是一把强大的工具，既能带来高效的版本管理，也可能让人一时手忙脚乱。面对错误和后悔，掌握“后悔药”不仅能帮助你快速恢复，还能在错误中总结经验，逐步养成良好的开发习惯。<br>记住：错误并不可怕，可怕的是不敢面对错误。每一次 Git 的失误，都是一次学习和进步的机会。Happy coding!</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在日常开发中，Git 已经成为不可或缺的版本控制工具，但它也时常让人感到“后悔”。无论是误操作、分支混乱还是合并灾难，每个开发者都有过那种“如果能回到过去，我绝不会那样做”的时刻。本文将整理一些常见的 Git 后悔时刻以及对应的“后悔药”——解决方案和预防措施，助你在 Gi</summary>
      
    
    
    
    <category term="日常折腾/闲言碎语" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE-%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
    <category term="Git" scheme="https://yzeblog.dev.tc/tags/Git/"/>
    
    <category term="Github" scheme="https://yzeblog.dev.tc/tags/Github/"/>
    
    <category term="后悔药" scheme="https://yzeblog.dev.tc/tags/%E5%90%8E%E6%82%94%E8%8D%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git终端使用笔记、手册、帮助及Github相关</title>
    <link href="https://yzeblog.dev.tc/15.html"/>
    <id>https://yzeblog.dev.tc/15.html</id>
    <published>2025-02-03T00:45:23.000Z</published>
    <updated>2025-02-03T00:59:22.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章是我给基本内容，然后我Crush在主笔的</p></blockquote><p>之前一直在用编辑器自带的Git相关功能，都是GUI操作，一键提交push那种，而且登陆只需要输入Token就能直接操作，终端Git接触的少之又少，其实说实话，离开GUI操作，终端上的Git是真的不太会用，最近打算重新学习一下终端Git的使用，顺手写了这篇笔记。</p><h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><p>Git（读音为&#x2F;gɪt&#x2F;）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p><p>Github是GitHub是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。GitHub拥有1亿以上的开发人员，400万以上组织机构和3.3亿以上资料库。</p><h2 id="Git安装教程"><a href="#Git安装教程" class="headerlink" title="Git安装教程"></a>Git安装教程</h2><p>我的日用系统是Arch Linux，这里用Arch Linux做为示例<br><strong>Arch Linux</strong></p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S git</span><br></pre></td></tr></table></figure></div><p>这样应该就安装好了</p><h2 id="Git基础配置"><a href="#Git基础配置" class="headerlink" title="Git基础配置"></a>Git基础配置</h2><p>装好Git后先别急着敲命令，配置好用户信息才能正确提交代码，不然你可能会变成「无名氏贡献者」</p><p><strong>设置全局用户名和邮箱</strong></p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></div><p>建议和GitHub&#x2F;Gitee等平台注册的邮箱保持一致，这样提交记录才能关联到你的账户</p><h2 id="终端Git生存必备指令"><a href="#终端Git生存必备指令" class="headerlink" title="终端Git生存必备指令"></a>终端Git生存必备指令</h2><p>你可能已经习惯了GUI的点点按钮，但命令行才是Git的完全体！（中二感拉满）</p><h3 id="本地操作三连"><a href="#本地操作三连" class="headerlink" title="本地操作三连"></a>本地操作三连</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化仓库（老司机请跳过）</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前状态（堪比手机锁屏看时间的使用频率）</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加文件到暂存区（注意那个点表示全部添加）</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交更改（-m后面跟提交信息，别学某些人写<span class="string">&quot;又改了点bug&quot;</span>）</span></span><br><span class="line">git commit -m &quot;清晰的提交说明&quot;</span><br></pre></td></tr></table></figure></div><h3 id="分支管理魔法"><a href="#分支管理魔法" class="headerlink" title="分支管理魔法"></a>分支管理魔法</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前分支（带*号的就是你现在的位置）</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建新分支（建议分支名用英文短横线分隔）</span></span><br><span class="line">git branch new-feature</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换分支（丝滑程度堪比vim上下翻页）</span></span><br><span class="line">git checkout main</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并分支（在main分支执行这个命令）</span></span><br><span class="line">git merge new-feature</span><br></pre></td></tr></table></figure></div><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>一直在本地提交也不是个办法，来提交到远程仓库</p><h3 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加远程仓库（origin是默认称呼，想叫老婆也行）</span></span><br><span class="line">git remote add origin git@github.com:用户名/仓库名.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已配置的远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次推送记得加-u参数绑定上游分支</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></div><h3 id="祖传Token登录"><a href="#祖传Token登录" class="headerlink" title="祖传Token登录"></a>祖传Token登录</h3><p>还在记密码？2024年了该用Token了！这才是现代人的优雅姿势，而且Github也不支持密码登陆了：</p><ol><li><p><strong>生成个人访问令牌</strong>（以GitHub为例）</p><ul><li>进入 GitHub → Settings → Developer settings → Personal access tokens → Tokens (classic)</li><li>勾选repo权限（一般选前5个就够用）</li><li>生成后会得到一串类似<code>ghp_xxx</code>的Token，<strong>它只会显示一次</strong>，建议当场复制保存</li></ul></li><li><p><strong>修改远程仓库地址</strong><br>把常规HTTPS地址：</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure></div><p>改造为Token专属形态：</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://你的用户名:你的Token@github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://octocat:ghp_abc123def456@github.com/octocat/Hello-World.git</span><br></pre></td></tr></table></figure></div></li><li><p><strong>日常操作丝滑三连</strong></p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆仓库时直接认证</span></span><br><span class="line">git clone https://用户名:Token@github.com/用户名/仓库.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送代码时自动验证</span></span><br><span class="line">git push origin main</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取更新也不输密码</span></span><br><span class="line">git pull origin main</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="SSH密钥登陆"><a href="#SSH密钥登陆" class="headerlink" title="SSH密钥登陆"></a>SSH密钥登陆</h2><p>还在用Token登录？试试更优雅的SSH方式：</p><ol><li>生成密钥对（把邮箱换成你的）</li></ol><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></div><ol start="2"><li>一路回车（除非你想设置密码）</li><li>读取公钥粘贴到GitHub</li></ol><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure></div><h2 id="常见翻车现场急救"><a href="#常见翻车现场急救" class="headerlink" title="常见翻车现场急救"></a>常见翻车现场急救</h2><h3 id="手滑commit了不该提交的内容"><a href="#手滑commit了不该提交的内容" class="headerlink" title="手滑commit了不该提交的内容"></a>手滑commit了不该提交的内容</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤回最新commit（文件改动会保留）</span></span><br><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure></div><h3 id="代码冲突解决指南"><a href="#代码冲突解决指南" class="headerlink" title="代码冲突解决指南"></a>代码冲突解决指南</h3><p>当看到「CONFLICT」字样时：</p><ol><li>打开冲突文件</li><li>找到&lt;&lt;&lt;&lt;&lt;&lt;&lt;和&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记</li><li>手动选择要保留的代码</li><li>重新add+commit</li></ol><h3 id="双修党的灵魂拷问"><a href="#双修党的灵魂拷问" class="headerlink" title="双修党的灵魂拷问"></a>双修党的灵魂拷问</h3><p><strong>Token vs SSH怎么选？</strong></p><table><thead><tr><th>特性</th><th>Token登录</th><th>SSH密钥</th></tr></thead><tbody><tr><td>适用协议</td><td>HTTPS</td><td>SSH</td></tr><tr><td>认证方式</td><td>每次推送带Token</td><td>密钥对自动认证</td></tr><tr><td>安全性</td><td>需防Token泄露</td><td>私钥不泄露就稳如老狗</td></tr><tr><td>适用场景</td><td>临时操作&#x2F;第三方客户端</td><td>长期开发主力机</td></tr></tbody></table><h3 id="防翻车秘籍"><a href="#防翻车秘籍" class="headerlink" title="防翻车秘籍"></a>防翻车秘籍</h3><ul><li><strong>Token安全三原则</strong>：<ol><li>别把Token直接写进脚本（小心<code>history</code>命令出卖你）</li><li>用<code>~/.netrc</code>文件藏Token（格式：<code>machine github.com login 用户名 password Token</code>）</li><li>定期到GitHub后台回收过期Token</li></ol></li><li><strong>紧急情况处理</strong>：<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果手抖暴露了Token，立即执行：</span></span><br><span class="line">git remote set-url origin 新仓库地址  # 火速更换远程地址</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>其实终端Git就像Vim，刚开始可能觉得反人类，但熟练后行云流水的操作会带来奇妙的愉悦感。建议新手先从小仓库练起，把常用命令写在便签上，忘记的时候随时瞟一眼。下次可能会写一篇「Git后悔药大全」，教你怎么用reflog穿越时空（笑）</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这篇文章是我给基本内容，然后我Crush在主笔的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前一直在用编辑器自带的Git相关功能，都是GUI操作，一键提交push那种，而且登陆只需要输入Token就能直接操作，终端Git接触的少之又少，其实说实话</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Git" scheme="https://yzeblog.dev.tc/tags/Git/"/>
    
    <category term="Github" scheme="https://yzeblog.dev.tc/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>BlogEcho-基于麦ICP备案系统开发的Rss综合聚集平台</title>
    <link href="https://yzeblog.dev.tc/14.html"/>
    <id>https://yzeblog.dev.tc/14.html</id>
    <published>2025-01-28T13:23:25.000Z</published>
    <updated>2025-01-28T13:25:52.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BlogEcho-PHP"><a href="#BlogEcho-PHP" class="headerlink" title="BlogEcho-PHP"></a>BlogEcho-PHP</h1><p>基于麦ICP备案系统开发的Rss综合聚集平台<br>开源地址：<a class="link"   href="https://github.com/YShenZe/BlogEcho-PHP" >https://github.com/YShenZe/BlogEcho-PHP<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><h2 id="部署后端RssAPI"><a href="#部署后端RssAPI" class="headerlink" title="部署后端RssAPI"></a>部署后端RssAPI</h2><p>将项目中的RssAPI.py文件移动到服务器上，然后新建Python项目，运行该文件同时开放5000端口。</p><p>安装依赖：</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector-python beautifulsoup4 requests Flask lxml</span><br></pre></td></tr></table></figure></div><p>运行项目：</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python RssAPI.py</span><br></pre></td></tr></table></figure></div><p>内网API地址为<a class="link"   href="http://127.0.0.1:5000/api" >http://127.0.0.1:5000/api<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><h2 id="部署站点项目"><a href="#部署站点项目" class="headerlink" title="部署站点项目"></a>部署站点项目</h2><p>新建PHP站点，在数据库执行</p><div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE record_system;</span><br><span class="line"></span><br><span class="line">USE record_system;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> records (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    site_name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    url <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    rssurl <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    site_description TEXT,</span><br><span class="line">    status <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> admin_users (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span></span><br><span class="line">);</span><br><span class="line">    <span class="keyword">INSERT INTO</span> admin_users (username, password) <span class="keyword">VALUES</span> (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> reports (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    record_id <span class="type">INT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    report_reason TEXT <span class="keyword">NOT NULL</span>,</span><br><span class="line">    status ENUM(<span class="string">&#x27;pending&#x27;</span>, <span class="string">&#x27;reviewed&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (record_id) <span class="keyword">REFERENCES</span> records(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><p>注意，上面的“admin”和“admin123”是后期登录管理后台的用户名和密码。</p><p>然后把所有文件移动到网站目录，给所有PHP文件上写好数据库信息即可访问了。</p><h1 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h1><p>遵循上游，使用GNU GENERAL PUBLIC LICENSE开源</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BlogEcho-PHP&quot;&gt;&lt;a href=&quot;#BlogEcho-PHP&quot; class=&quot;headerlink&quot; title=&quot;BlogEcho-PHP&quot;&gt;&lt;/a&gt;BlogEcho-PHP&lt;/h1&gt;&lt;p&gt;基于麦ICP备案系统开发的Rss综合聚集平台&lt;br&gt;开源地址</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="回响" scheme="https://yzeblog.dev.tc/tags/%E5%9B%9E%E5%93%8D/"/>
    
    <category term="Rss聚合" scheme="https://yzeblog.dev.tc/tags/Rss%E8%81%9A%E5%90%88/"/>
    
    <category term="BlogEcho" scheme="https://yzeblog.dev.tc/tags/BlogEcho/"/>
    
  </entry>
  
  <entry>
    <title>梦泽2024的年度总结</title>
    <link href="https://yzeblog.dev.tc/13.html"/>
    <id>https://yzeblog.dev.tc/13.html</id>
    <published>2025-01-28T05:18:26.000Z</published>
    <updated>2025-01-28T05:22:58.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先，我梦泽祝全中国、港澳台同胞们、全球华人华侨们，新年快乐。</p></blockquote><p>来看看我这一年都干了什么吧！</p><h2 id="技术栈方面"><a href="#技术栈方面" class="headerlink" title="技术栈方面"></a>技术栈方面</h2><p>2024年，我学习了 Vue3、Node.js 以及 Serverless 技术，并使用这些技术搭建了许多网站。不过遗憾的是，这些项目大多无后续发展而停运。目前我的博客托管在 GitHub Pages 上，等待合适的新服务商提供云服务。</p><p>在数据库方面，我逐渐从 SQLite 和 MySQL 中脱身，开始转向使用 MongoDB 和少量的 Redis。<br>同时，我几乎完全放弃了接近精通的 PHP，转向了无服务即功能（Serverless）和微服务架构的方向。为此，我还学习了 Golang，并尝试用它开发了两个项目，但均以烂尾告终。</p><h2 id="项目方面"><a href="#项目方面" class="headerlink" title="项目方面"></a>项目方面</h2><p>2024年，我开发了以下项目：</p><ul><li>版本库程序 TailDown</li><li>基于 Vue3 的个人主题 ZeHome</li><li>基于 Node.js 的 IPToolbox</li><li>RSS 聚合项目“回响 (BlogEcho)”<ul><li>同时开发了 BlogEcho 的前端界面以及 RSS&#x2F;API 功能。</li></ul></li></ul><h2 id="感情方面"><a href="#感情方面" class="headerlink" title="感情方面"></a>感情方面</h2><ul><li>2024年1月，与初恋复合，但因问题再次分手。</li><li>2024年6月，认识了一位新女友，但11月再次分手。</li><li>2024年11月末，遇见了一个让我感到救赎的女孩，但在12月因意见不合再度分离。</li></ul><h2 id="游戏方面"><a href="#游戏方面" class="headerlink" title="游戏方面"></a>游戏方面</h2><p>2024年6月，我接手了一个新服务器 Astro，从最初的十人小服发展为百人规模的大型互通生存服，日活跃用户超过20+。</p><p>可惜由于管理组野心太大，他们架空并最终踢出了我。数日后，Astro 宣布解散。</p><p>2024年12月，我使用一台物理机新开了服务器 “招灾”，目前正在发展中。</p><h2 id="总结一下吧"><a href="#总结一下吧" class="headerlink" title="总结一下吧"></a>总结一下吧</h2><p>2024年，我并未完成什么值得称道的大事，浑浑噩噩地度过了一年。但这一年中，我学到了很多新知识，也积累了许多经验。</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;首先，我梦泽祝全中国、港澳台同胞们、全球华人华侨们，新年快乐。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来看看我这一年都干了什么吧！&lt;/p&gt;
&lt;h2 id=&quot;技术栈方面&quot;&gt;&lt;a href=&quot;#技术栈方面&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="闲言碎语" scheme="https://yzeblog.dev.tc/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
    <category term="年度总结" scheme="https://yzeblog.dev.tc/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    <category term="2024" scheme="https://yzeblog.dev.tc/tags/2024/"/>
    
    <category term="新年快乐" scheme="https://yzeblog.dev.tc/tags/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yzeblog.dev.tc/hello-world.html"/>
    <id>https://yzeblog.dev.tc/hello-world.html</id>
    <published>2025-01-23T07:24:17.865Z</published>
    <updated>2025-01-23T07:24:17.865Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>给你的Github Pages项目申请一个js.org域名</title>
    <link href="https://yzeblog.dev.tc/12.html"/>
    <id>https://yzeblog.dev.tc/12.html</id>
    <published>2025-01-22T10:35:00.000Z</published>
    <updated>2025-01-23T12:51:13.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仅适用于Vercel、Github Pages网站，其余网站无法申请，申请前请确保你会使用Github至少Fork、编辑和提交Pr。不懂的评论区提出问题！</p></blockquote><p>今天看见一个使用Vue开发的WebSocket测试工具，但是如果使用Github Pages自带的域名国内很多地方访问不了，于是我就打算申请一个websocket.js.org域名来挂载这个项目，顺带出了这篇教程 <del>水一篇文章</del></p><p>Jsorg是一个公益项目，它为全球几千用户提供了免费的xxx.js.org域名，这些域名通常用于Vercel、Github Pages上的JavaScript项目，官网上的描述是：</p><blockquote><p>Are you a JavaScript developer looking for free webspace to host your project?<br>Check out GitHub Pages. To make things perfect we provide you with a free and sleek URL</p></blockquote><p>翻译过来就是：</p><blockquote><p>您是 JavaScript 开发人员，正在寻找免费的网站空间来托管您的项目吗？<br>请访问 GitHub 页面。 为了让一切更完美，我们为您提供了一个免费、时尚的 URL      </p></blockquote><ul><li>来自DeepL翻译</li></ul><h2 id="申请前准备，如果你已有项目请跳过"><a href="#申请前准备，如果你已有项目请跳过" class="headerlink" title="申请前准备，如果你已有项目请跳过"></a>申请前准备，如果你已有项目请跳过</h2><p>申请前需要准备一个Github账号，如果你需要申请Vercel项目，也要准备Vercel账号，不过官网只写了Github Pages，但是我在域名列表里面看见了有用Vercel申请的，本人未做测试，不过有就说明能申请，申请有可能不通过，可以多尝试几次，然后你还需会使用Github至少Fork、编辑和提交Pr，因为这是申请流程必须的。</p><ul><li>Github账号</li><li>Github Pages仓库</li><li>手、脑子、可以联网的设备</li><li>可以正常使用Github Pages的网络环境</li></ul><h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>打开这个Github仓库 <a class="link"   href="https://github.com/js-org/js.org%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8A%8A%E8%BF%99%E4%B8%AA%E4%BB%93%E5%BA%93Fork%E5%88%B0%E4%BD%A0%E7%9A%84%E8%B4%A6%E5%8F%B7%EF%BC%8C%E7%AD%89%E5%BE%85%E5%87%A0%E7%A7%92%E5%8D%B3%E5%8F%AF%E3%80%82" >https://github.com/js-org/js.org，然后把这个仓库Fork到你的账号，等待几秒即可。<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><p>找到并编辑<code>cname_active.js</code>文件，使用以下格式在<code>cname_active</code>对象里面添加一个键值对：</p><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;域名前缀&quot;</span>: <span class="string">&quot;你的Github Pages仓库域名（或Vercel CNAME）&quot;</span></span><br></pre></td></tr></table></figure></div><p>而且你还要把如果你不知道具体加到哪一行，因为这并不是直接加到最后一行，而是新添加一个键值对，那么具体请看该图，你的比较至少应该和我一样：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-22_2f2a3.jpg"                                     ><br>当然了，<del>这是JavaScript基础知识</del></p><p>OK了编辑好之后就提交和推送，之后你的仓库便会领先源仓库一个提交，此时就可以直接提起pr了，提交pr的格式不用多说，你只需要修改标题为你想要的域名，比如我的<strong>websocket.js.org</strong>，内容会自动帮你写好，你需要勾选那两个选项：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-22_2ccef.jpg"                                     ><br>我的勾选符号貌似写错了，不过应该不影响<br>内容翻译过来就是：</p><blockquote><ul><li>页面上有合理的内容（参见：无内容）</li><li>我已阅读并接受条款和条件</li><li>来自DeepL翻译</li></ul></blockquote><p>接下来在你的Github Pages仓库的Pages根目录新建一个<code>CNAME</code>文件，里面输入你申请的域名，或者在仓库设置里面找到<strong>Pages</strong>，切换域名那输入域名，当然这样就得等你域名下来之后才行了，优点是这样可以正常且快速的签发SSL，而且这是文档操作，因为它会自动生成<code>CNAME文件</code></p><p>之后就是等待了，由于时差原因，如果你是在白天申请的，一般情况下可能会道第二天才会受理，美国属于西五区，中国属于东八区，时差相差13个小时，也就是说美国时间比北京时间晚13个小时，你提交那会人家可能还在呼呼大睡，在中午12点之后再提交是最好的，因为人家可以公刚刚起来。<br>其次不要着急，因为人家毕竟是免费项目，申请起来慢一些很正常，更何况它还不慢。<br>这个域名在中国大陆是可以正常访问的，是可以正常访问的，还有关于SSL支不支持，SSL是Github Pages自动给你签发的，你可以手动关闭 默认开启。</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;仅适用于Vercel、Github Pages网站，其余网站无法申请，申请前请确保你会使用Github至少Fork、编辑和提交Pr。不懂的评论区提出问题！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天看见一个使用Vue开发的WebSocket测试</summary>
      
    
    
    
    <category term="日常折腾/闲言碎语" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE-%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
    <category term="免费域名" scheme="https://yzeblog.dev.tc/tags/%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/"/>
    
    <category term="Github Pages" scheme="https://yzeblog.dev.tc/tags/Github-Pages/"/>
    
    <category term="js.org" scheme="https://yzeblog.dev.tc/tags/js-org/"/>
    
    <category term="白嫖域名" scheme="https://yzeblog.dev.tc/tags/%E7%99%BD%E5%AB%96%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>腾讯连封我两个QQ号，其中一个完全误判</title>
    <link href="https://yzeblog.dev.tc/11.html"/>
    <id>https://yzeblog.dev.tc/11.html</id>
    <published>2025-01-21T14:08:00.000Z</published>
    <updated>2025-01-23T12:51:24.602Z</updated>
    
    <content type="html"><![CDATA[<p>今天我上线发现，我大号3987876774账号因为刷模块被封了，这个我服，因为我确实违规了，被限制了聊天、动态空间<br>但是我的小号，我刚注册不到5个小时得小号，说我发布违规内容，也限制了聊天和空间，来来来腾讯咱俩对峙一下，还号我聊的天不多，下面是所有没改过的截图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-21_14fc5.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-21_b458d.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-21_89f96.png"                                     ></p><p>上面都是正常的聊天是吧 好了这会肯定会说链接了，但是我就好起来，做为一款聊天软件，我是一个网站管理员，和我同行聊天，发点自己网站的链接、IP很正常吧？这违规了吗？<br>这是违规截图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-21_c6e22.jpg"                                     ><br>是发布违规内容对吧，那么好，我请问 我聊天记录里面哪一条违规了？你指出来！<br><strong>如果没有违规，那就是你平台有问题</strong><br><strong>如果说，规则里面说了这些违规，那么我只能说，腾讯QQ你20多年了都不如微信是有原因的！</strong><br>一直在用QQ，之前一直说是一款还不错的聊天软件。但是你这样做，我真的很失望，你但凡一个人工审核，都不会出现这种问题。目前玩多腾讯QQ的评价是：<strong>UI不如微信，功能不如微信</strong>，而且QQ做为我的主用聊天软件，你出现这种严重误判，说实话，你真的不行了。<br>最后</p><h2 id="我哪里违规发言了！"><a href="#我哪里违规发言了！" class="headerlink" title="我哪里违规发言了！"></a>我哪里违规发言了！</h2><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天我上线发现，我大号3987876774账号因为刷模块被封了，这个我服，因为我确实违规了，被限制了聊天、动态空间&lt;br&gt;但是我的小号，我刚注册不到5个小时得小号，说我发布违规内容，也限制了聊天和空间，来来来腾讯咱俩对峙一下，还号我聊的天不多，下面是所有没改过的截图：&lt;br</summary>
      
    
    
    
    <category term="日常吐槽" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E5%90%90%E6%A7%BD/"/>
    
    
    <category term="腾讯QQ" scheme="https://yzeblog.dev.tc/tags/%E8%85%BE%E8%AE%AFQQ/"/>
    
    <category term="腾讯乱封号" scheme="https://yzeblog.dev.tc/tags/%E8%85%BE%E8%AE%AF%E4%B9%B1%E5%B0%81%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>我用Python写了个爬取链接图片视频的脚本</title>
    <link href="https://yzeblog.dev.tc/10.html"/>
    <id>https://yzeblog.dev.tc/10.html</id>
    <published>2025-01-19T12:41:00.000Z</published>
    <updated>2025-01-23T12:44:08.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先来导入一些库"><a href="#先来导入一些库" class="headerlink" title="先来导入一些库"></a>先来导入一些库</h2><p>之前有人抱怨文章太死板了，后面我就用这个风格写文章了，因为第一次换风格，有什么妥当的评论区说出来吧。</p><p>一开始得先安装并导入一些需要的库，没啥好说的，都是爬虫开发必备的工具。</p><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pyfiglet</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.util.retry <span class="keyword">import</span> Retry</span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> init, Fore</span><br></pre></td></tr></table></figure></div><ul><li>requests：用来请求网页。</li><li>BeautifulSoup：解析网页 HTML，找图片和视频链接。</li><li>pyfiglet：用来生成艺术字，输出个好看的标题。</li><li>fake_useragent：生成随机浏览器的User-Agent，避免被封。</li><li>colorama：给终端输出加点颜色，看起来酷一点。</li></ul><h2 id="给爬虫加点艺术"><a href="#给爬虫加点艺术" class="headerlink" title="给爬虫加点艺术"></a>给爬虫加点艺术</h2><p>代码一开始，就让它有点“气质”，用 pyfiglet 给个大大的欢迎字。起码能让人眼前一亮。</p><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init(autoreset=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">art = pyfiglet.figlet_format(<span class="string">&quot;ZeTooL-Img&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(art)</span><br></pre></td></tr></table></figure></div><p>输出啥样的字就看这个设置了，起码能让人眼前一亮。</p><h2 id="用户输入-URL"><a href="#用户输入-URL" class="headerlink" title="用户输入 URL"></a>用户输入 URL</h2><p>接下来让用户输入一个想要爬取的链接。这个链接就是爬虫的目标网页。</p><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="built_in">input</span>(<span class="string">&quot;请输入要爬取的链接: &quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="模拟浏览器请求"><a href="#模拟浏览器请求" class="headerlink" title="模拟浏览器请求"></a>模拟浏览器请求</h2><p>为了避免爬虫被封，伪装一下。用 fake_useragent 随机生成一个浏览器的 User-Agent，还有一个随机的 IP 地址。这样伪装成不同的浏览器、不同地区的用户，能增加不被封的几率。</p><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">systems = [</span><br><span class="line">    <span class="string">&quot;Windows NT 6.1; Win64; x64&quot;</span>,  <span class="comment"># Windows 7</span></span><br><span class="line">    <span class="string">&quot;Windows NT 10.0; Win64; x64&quot;</span>,  <span class="comment"># Windows 10</span></span><br><span class="line">    <span class="string">&quot;Android 8.0.0; Pixel 2&quot;</span>,      <span class="comment"># Android 8</span></span><br><span class="line">    <span class="string">&quot;iOS 16.0; iPhone 13&quot;</span>          <span class="comment"># iOS 16</span></span><br><span class="line">]</span><br><span class="line">system = random.choice(systems)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成一个中国IP</span></span><br><span class="line">ip = <span class="string">f&quot;223.104.<span class="subst">&#123;random.randint(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>.<span class="subst">&#123;random.randint(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>&quot;</span></span><br><span class="line">ua = UserAgent()</span><br><span class="line">user_agent = ua.random  <span class="comment"># 随机生成一个User-Agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头设置</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: user_agent,</span><br><span class="line">    <span class="string">&quot;X-Forwarded-For&quot;</span>: ip,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>有了这些伪装，爬虫才不容易被发现。</p><h2 id="设置请求重试机制"><a href="#设置请求重试机制" class="headerlink" title="设置请求重试机制"></a>设置请求重试机制</h2><p>网络不好或者网站服务器有问题，可能会导致请求失败。为了避免脚本崩溃，加个重试机制。如果请求失败，会自动再试 3 次，避免一不小心就把程序搞崩。</p><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求重试机制</span></span><br><span class="line">retry_strategy = Retry(</span><br><span class="line">    total=<span class="number">3</span>,  <span class="comment"># 最多重试3次</span></span><br><span class="line">    backoff_factor=<span class="number">1</span>,  <span class="comment"># 每次重试间隔会越来越长</span></span><br><span class="line">    status_forcelist=[<span class="number">500</span>, <span class="number">502</span>, <span class="number">503</span>, <span class="number">504</span>, <span class="number">404</span>, <span class="number">403</span>],  <span class="comment"># 这些错误会触发重试</span></span><br><span class="line">    allowed_methods=[<span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>]  <span class="comment"># 仅对GET、HEAD、OPTIONS方法重试</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line">session.mount(<span class="string">&quot;http://&quot;</span>, HTTPAdapter(max_retries=retry_strategy))</span><br><span class="line">session.mount(<span class="string">&quot;https://&quot;</span>, HTTPAdapter(max_retries=retry_strategy))</span><br></pre></td></tr></table></figure></div><h2 id="定义爬取网页的函数"><a href="#定义爬取网页的函数" class="headerlink" title="定义爬取网页的函数"></a>定义爬取网页的函数</h2><p>写个函数来发请求、获取网页。出现错误的时候，显示一些友好的错误信息。</p><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = session.get(url, headers=headers, timeout=<span class="number">10</span>)  <span class="comment"># 请求超时设置为10秒</span></span><br><span class="line">        response.raise_for_status()  <span class="comment"># 如果网页返回错误码，抛出异常</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.Timeout:</span><br><span class="line">        <span class="built_in">print</span>(Fore.RED + <span class="string">&quot;错误: 请求超时，请检查网络连接或稍后重试。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.TooManyRedirects:</span><br><span class="line">        <span class="built_in">print</span>(Fore.RED + <span class="string">&quot;错误: 请求的URL出现重定向过多的情况。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.HTTPError <span class="keyword">as</span> http_err:</span><br><span class="line">        <span class="built_in">print</span>(Fore.RED + <span class="string">f&quot;HTTP 错误: <span class="subst">&#123;http_err&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(Fore.RED + <span class="string">f&quot;请求出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></div><p>这样能确保网页请求成功才会继续执行后续操作。</p><h2 id="解析网页，抓取图片和视频链接"><a href="#解析网页，抓取图片和视频链接" class="headerlink" title="解析网页，抓取图片和视频链接"></a>解析网页，抓取图片和视频链接</h2><p>用 BeautifulSoup 来解析 HTML 页面，抓取所有<code>&lt;img&gt;</code>和<code>&lt;video&gt;</code>标签里的<code>src</code>属性。如果是相对路径，就拼成完整的 URL。</p><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">image_links = []  <span class="comment"># 存图片链接</span></span><br><span class="line">video_links = []  <span class="comment"># 存视频链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取图片链接</span></span><br><span class="line"><span class="keyword">for</span> img_tag <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;img&#x27;</span>):</span><br><span class="line">    img_src = img_tag.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> img_src:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> img_src.startswith(<span class="string">&#x27;http&#x27;</span>):  <span class="comment"># 拼接相对路径</span></span><br><span class="line">            img_src = url + img_src</span><br><span class="line">        image_links.append(img_src)</span><br><span class="line">        <span class="built_in">print</span>(Fore.GREEN + <span class="string">f&quot;[Fetch Log] Image Link: <span class="subst">&#123;img_src&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取视频链接</span></span><br><span class="line"><span class="keyword">for</span> video_tag <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;video&#x27;</span>):</span><br><span class="line">    video_src = video_tag.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> video_src:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> video_src.startswith(<span class="string">&#x27;http&#x27;</span>):  <span class="comment"># 拼接相对路径</span></span><br><span class="line">            video_src = url + video_src</span><br><span class="line">        video_links.append(video_src)</span><br><span class="line">        <span class="built_in">print</span>(Fore.GREEN + <span class="string">f&quot;[Fetch Log] Video Link: <span class="subst">&#123;video_src&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="保存链接到文件"><a href="#保存链接到文件" class="headerlink" title="保存链接到文件"></a>保存链接到文件</h2><p>把抓取到的图片和视频链接保存到 media_links.txt 文件中。保存格式简单清晰，后面可以方便地处理。</p><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;media_links.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;--- Image Links ---\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> img_link <span class="keyword">in</span> image_links:</span><br><span class="line">        file.write(img_link + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    file.write(<span class="string">&#x27;\n--- Video Links ---\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> video_link <span class="keyword">in</span> video_links:</span><br><span class="line">        file.write(video_link + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Fore.GREEN + <span class="string">&#x27;链接已经保存到 media_links.txt 文件中。&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="附上代码"><a href="#附上代码" class="headerlink" title="附上代码"></a>附上代码</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pyfiglet</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.util.retry <span class="keyword">import</span> Retry</span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> init, Fore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 佛祖保佑，永无bug</span></span><br><span class="line"><span class="comment">#      ____  </span></span><br><span class="line"><span class="comment">#     /    \ </span></span><br><span class="line"><span class="comment">#    /      \</span></span><br><span class="line"><span class="comment">#   |        |</span></span><br><span class="line"><span class="comment">#   |  O  O  |  佛祖保佑</span></span><br><span class="line"><span class="comment">#   |    ^   |</span></span><br><span class="line"><span class="comment">#   |   ---  |  </span></span><br><span class="line"><span class="comment">#    \______/</span></span><br><span class="line"><span class="comment">#   /        \</span></span><br><span class="line"><span class="comment">#  /__________\</span></span><br><span class="line"><span class="comment">#    |      |</span></span><br><span class="line"><span class="comment">#    |      |</span></span><br><span class="line"><span class="comment">#    |      |</span></span><br><span class="line"><span class="comment">#   (__)  (__)</span></span><br><span class="line"></span><br><span class="line">init(autoreset=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">art = pyfiglet.figlet_format(<span class="string">&quot;ZeTooL-Img&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(art)</span><br><span class="line"></span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&quot;请输入要爬取的链接: &quot;</span>)</span><br><span class="line"></span><br><span class="line">systems = [</span><br><span class="line">    <span class="string">&quot;Windows NT 6.1; Win64; x64&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Windows NT 10.0; Win64; x64&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Windows NT 6.3; Win64; x64&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Android 8.0.0; Pixel 2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Android 9.0.0; Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Android 10.0; Pixel 4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iOS 16.0; iPhone 13&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iOS 17.0; iPhone 14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iOS 18.0; iPhone 15&quot;</span></span><br><span class="line">]</span><br><span class="line">system = random.choice(systems)</span><br><span class="line"></span><br><span class="line">ip = <span class="string">f&quot;223.104.<span class="subst">&#123;random.randint(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>.<span class="subst">&#123;random.randint(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>&quot;</span></span><br><span class="line">ua = UserAgent()</span><br><span class="line">user_agent = ua.random</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: user_agent,</span><br><span class="line">    <span class="string">&quot;X-Forwarded-For&quot;</span>: ip,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">retry_strategy = Retry(</span><br><span class="line">    total=<span class="number">3</span>,</span><br><span class="line">    backoff_factor=<span class="number">1</span>,</span><br><span class="line">    status_forcelist=[<span class="number">500</span>, <span class="number">502</span>, <span class="number">503</span>, <span class="number">504</span>, <span class="number">404</span>, <span class="number">403</span>],</span><br><span class="line">    allowed_methods=[<span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line">session.mount(<span class="string">&quot;http://&quot;</span>, HTTPAdapter(max_retries=retry_strategy))</span><br><span class="line">session.mount(<span class="string">&quot;https://&quot;</span>, HTTPAdapter(max_retries=retry_strategy))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = session.get(url, headers=headers, timeout=<span class="number">10</span>)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.Timeout:</span><br><span class="line">        <span class="built_in">print</span>(Fore.RED + <span class="string">&quot;错误: 请求超时，请检查网络连接或稍后重试。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.TooManyRedirects:</span><br><span class="line">        <span class="built_in">print</span>(Fore.RED + <span class="string">&quot;错误: 请求的URL出现重定向过多的情况。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.HTTPError <span class="keyword">as</span> http_err:</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">404</span>:</span><br><span class="line">            <span class="built_in">print</span>(Fore.RED + <span class="string">&quot;错误: 找不到页面 (404)。请检查URL是否正确。&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> response.status_code == <span class="number">403</span>:</span><br><span class="line">            <span class="built_in">print</span>(Fore.RED + <span class="string">&quot;错误: 权限不足 (403)。访问被拒绝。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(Fore.RED + <span class="string">f&quot;HTTP 错误: <span class="subst">&#123;http_err&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(Fore.RED + <span class="string">f&quot;请求出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">response = fetch_page(url)</span><br><span class="line"><span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(Fore.RED + <span class="string">&quot;无法爬取该链接，请检查URL或稍后再试。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    image_links = []</span><br><span class="line">    video_links = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> img_tag <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;img&#x27;</span>):</span><br><span class="line">        img_src = img_tag.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> img_src:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> img_src.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">                img_src = url + img_src</span><br><span class="line">            image_links.append(img_src)</span><br><span class="line">            <span class="built_in">print</span>(Fore.GREEN + <span class="string">f&quot;[Fetch Log] Image Link: <span class="subst">&#123;img_src&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> video_tag <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;video&#x27;</span>):</span><br><span class="line">        video_src = video_tag.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> video_src:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> video_src.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">                video_src = url + video_src</span><br><span class="line">            video_links.append(video_src)</span><br><span class="line">            <span class="built_in">print</span>(Fore.GREEN + <span class="string">f&quot;[Fetch Log] Video Link: <span class="subst">&#123;video_src&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> source_tag <span class="keyword">in</span> video_tag.find_all(<span class="string">&#x27;source&#x27;</span>):</span><br><span class="line">            source_src = source_tag.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> source_src:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> source_src.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">                    source_src = url + source_src</span><br><span class="line">                video_links.append(source_src)</span><br><span class="line">                <span class="built_in">print</span>(Fore.GREEN + <span class="string">f&quot;[Fetch Log] Video Link: <span class="subst">&#123;source_src&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;media_links.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(<span class="string">&#x27;--- Image Links ---\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> img_link <span class="keyword">in</span> image_links:</span><br><span class="line">            file.write(img_link + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        file.write(<span class="string">&#x27;\n--- Video Links ---\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> video_link <span class="keyword">in</span> video_links:</span><br><span class="line">            file.write(video_link + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(Fore.GREEN + <span class="string">&#x27;链接已经保存到 media_links.txt 文件中。&#x27;</span>)</span><br></pre></td></tr></table></figure></div><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;先来导入一些库&quot;&gt;&lt;a href=&quot;#先来导入一些库&quot; class=&quot;headerlink&quot; title=&quot;先来导入一些库&quot;&gt;&lt;/a&gt;先来导入一些库&lt;/h2&gt;&lt;p&gt;之前有人抱怨文章太死板了，后面我就用这个风格写文章了，因为第一次换风格，有什么妥当的评论区说出来吧。</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Python" scheme="https://yzeblog.dev.tc/tags/Python/"/>
    
    <category term="爬虫" scheme="https://yzeblog.dev.tc/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中Console对象常用函数</title>
    <link href="https://yzeblog.dev.tc/9.html"/>
    <id>https://yzeblog.dev.tc/9.html</id>
    <published>2025-01-09T12:27:00.000Z</published>
    <updated>2025-01-23T12:51:40.854Z</updated>
    
    <content type="html"><![CDATA[<p>要说JavaScript中哪个方法用得最多，我肯定得说是<code>console.log()</code>了，但是<strong>console</strong>对象中不仅仅有<code>log</code>函数，还有比如调试信息<code>debug</code>、普通信息<code>info</code>等等，还有其他得好多方法，如果你不知道，看看这篇文章绝对对你得JavaScript开发有帮助。<br>之前看渡一的大师课对这有讲解过，今天在项目中有用到顺带来复习一下。</p><h2 id="log方法打印普通消息"><a href="#log方法打印普通消息" class="headerlink" title="log方法打印普通消息"></a>log方法打印普通消息</h2><p>这个方法应该不要我多说了，应该是各位最常用的一个方法了吧，就是在控制台&#x2F;终端输出普通的消息<strong>massage</strong>，我当时学Node.js第一句还是：</p><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>这个呢</p><h2 id="warn打印警告信息"><a href="#warn打印警告信息" class="headerlink" title="warn打印警告信息"></a>warn打印警告信息</h2><p>这个也没什么好说的，就是警告⚠️，一般来说是开发公共库的时候需要使用，或者公共项目</p><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;This is a warning message.&quot;</span>);</span><br></pre></td></tr></table></figure></div><h2 id="error打印错误信息"><a href="#error打印错误信息" class="headerlink" title="error打印错误信息"></a>error打印错误信息</h2><p>也没什么好说的，打印错误信息，喝警告差不多，不过这个是红色的</p><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;This is an error message.&quot;</span>);</span><br></pre></td></tr></table></figure></div><h2 id="debug方法打印调试信息"><a href="#debug方法打印调试信息" class="headerlink" title="debug方法打印调试信息"></a>debug方法打印调试信息</h2><p>其实调试信息<strong>debug</strong>和普通信息<strong>log</strong>是一样的，只不过这个信息的分类时调试信息<code>Verbose</code>分类，</p><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">debug</span>(<span class="string">&#x27;God bless me!&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h2 id="table方法打印数组为表格"><a href="#table方法打印数组为表格" class="headerlink" title="table方法打印数组为表格"></a>table方法打印数组为表格</h2><p>从服务器拉数据或者本地对象数组，跳过使用<code>console.log();</code>打印的话，就非常的难以理解，难阅读，就像这样：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-09_6c349.jpg"                      alt="使用log输出数组"                ><br>打印成表格就好看好多。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-09_76c3a.jpg"                      alt="使用table输出数组"                ></p><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">lang</span>: <span class="string">&#x27;C/C++&#x27;</span>,</span><br><span class="line">    <span class="attr">OS</span>: <span class="string">&#x27;Linux/Windows&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">lang</span>: <span class="string">&#x27;Java&#x27;</span>,</span><br><span class="line">    <span class="attr">OS</span>: <span class="string">&#x27;Linux/Windows&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">lang</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">    <span class="attr">OS</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></div><h2 id="group分组打印信息"><a href="#group分组打印信息" class="headerlink" title="group分组打印信息"></a>group分组打印信息</h2><p>使用<code>console.group()</code>和<code>console.groupEnd()</code>来分组输出信息。<br>字面意思，当我们在控制台输出大量信息时需要对学习信息进行分组便于查阅。<br>这个需要两行代码给一段代码包含住，就像：</p><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&quot;Group 1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Message 1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Message 2&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br></pre></td></tr></table></figure></div><h2 id="time记录并打印代码运行耗时"><a href="#time记录并打印代码运行耗时" class="headerlink" title="time记录并打印代码运行耗时"></a>time记录并打印代码运行耗时</h2><p>使用<code>console.time()</code>和<code>console.timeEnd()</code>来测量代码执行时间，加入这个代码代码运行完成会在控制台输出代码运行用了多长时间</p><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;Timer&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;Timer&quot;</span>);</span><br></pre></td></tr></table></figure></div><h2 id="trace堆栈跟踪追踪函调用路径"><a href="#trace堆栈跟踪追踪函调用路径" class="headerlink" title="trace堆栈跟踪追踪函调用路径"></a>trace堆栈跟踪追踪函调用路径</h2><p>使用<code>console.trace()</code>来追踪函数调用路径，这个说起来有点麻烦，函数不是可以嵌套一层套一层嘛，然后当 JavaScript 代码执行过程中发生错误时，浏览器或 JavaScript 引擎提供的一份报告，它记录了错误发生时代码的执行路径。 它像面包屑一样，指引开发者找到错误的源头。 理解堆栈跟踪对于前端开发者来说至关重要，因为它能帮助我们快速定位和修复 bug。</p><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">trace</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure></div><p>目前我所知道的就这些了，其实JavaScript学起来很简单，尤其是你有基本网络知识的时候，学JavaScript可以来我群<strong>1018215378</strong>(QQ)，JavaScript难在浏览器原理啊什么的，这个推荐看渡一的大师课，对你提高薪资和跳槽都有帮助的，同时多刷刷面试题什么的。</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要说JavaScript中哪个方法用得最多，我肯定得说是&lt;code&gt;console.log()&lt;/code&gt;了，但是&lt;strong&gt;console&lt;/strong&gt;对象中不仅仅有&lt;code&gt;log&lt;/code&gt;函数，还有比如调试信息&lt;code&gt;debug&lt;/code&gt;、普通</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="JavaScript" scheme="https://yzeblog.dev.tc/tags/JavaScript/"/>
    
    <category term="console" scheme="https://yzeblog.dev.tc/tags/console/"/>
    
    <category term="console.log" scheme="https://yzeblog.dev.tc/tags/console-log/"/>
    
  </entry>
  
  <entry>
    <title>安装ZSH,并使用oh-my-zsh美化Linux终端</title>
    <link href="https://yzeblog.dev.tc/8.html"/>
    <id>https://yzeblog.dev.tc/8.html</id>
    <published>2025-01-05T08:22:00.000Z</published>
    <updated>2025-01-23T12:51:46.830Z</updated>
    
    <content type="html"><![CDATA[<p>传统Shell(bash)终端实在太难看了，今天来安装一下zsh并使用oh-my-zsh美化Linux终端，这里以Ubuntu22.04做示例，这是我服务器的实操过程。</p><h2 id="更新软件包列表和安装必要环境"><a href="#更新软件包列表和安装必要环境" class="headerlink" title="更新软件包列表和安装必要环境"></a>更新软件包列表和安装必要环境</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br><span class="line">apt install zsh git curl -y</span><br></pre></td></tr></table></figure></div><p>然后开始下载oh-my-sh</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></div><p>遇到 <strong>Time to change your default shell to zsh:Do you want to change your default shell to zsh? [Y&#x2F;n]</strong> 记得选Y</p><p>安装成功后如下截图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-05_25e80.jpg"                      alt="安装成功截图"                ></p><p>接下来开始迁移一些配置，只要把你<code>.bashrc</code>的自定义配置转移到<code>.zshrc</code>即可，比如文档gradle环境变量，直接复制过来。</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GRABLE_HOME=/data/data/com.termux/files/home/grable</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GRABLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> GRADLE_HOME=/data/data/com.termux/files/home/gradle</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GRADLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></div><p>像这种环境变量是可以直接复制过去的，放在最后即可</p><h2 id="主题安装-主题推荐"><a href="#主题安装-主题推荐" class="headerlink" title="主题安装&amp;主题推荐"></a>主题安装&amp;主题推荐</h2><p>安装主题其实非常简单，而且oh-my-zsh内置了很多好看好用的主题，手动安装无非就是克隆仓库道指定目录，然后编辑配置文件，重载。<br>我拿我最喜欢的bira做教程，这款主题是内置的。<br>找到<code>.zshrc</code>文件，看不见的使用<code>ls -a</code>命令显示隐藏文件<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-05_8ce5b.jpg"                      alt="文件列表"                ></p><p>打开该文件，推荐使用vim或者nano编辑器，这里使用nano，找到如下部分：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-05_ba40c.jpg"                      alt="nano编辑器内的.zshrc文件"                ></p><p>把<code>ZSH_THEME=&quot;robbyrussell&quot;</code>改成<code>ZSH_THEME=&quot;bira&quot;</code>即可，使用<code>CTRL+X</code>退出编辑器并保存文件，注意：<strong>双引号里面的是主题名</strong> ，然后运行：</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></div><p>效果图如下，如root用户为红色，也是非常好看：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-05_9f147.jpg"                      alt="Bira主题效果图"                ></p><h3 id="ys-包含时间戳-用户-位置-git的主题"><a href="#ys-包含时间戳-用户-位置-git的主题" class="headerlink" title="ys 包含时间戳-用户-位置-git的主题"></a>ys 包含时间戳-用户-位置-git的主题</h3><p>预览图如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-05_841ee.jpg"                      alt="ys主题预览"                ></p><h3 id="xiong-chiamiov-类似ys的双行主题"><a href="#xiong-chiamiov-类似ys的双行主题" class="headerlink" title="xiong-chiamiov 类似ys的双行主题"></a>xiong-chiamiov 类似ys的双行主题</h3><p>预览图如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-05_adaf6.jpg"                      alt="xiong-chiamiov主题预览图"                ></p><h2 id="插件安装-插件推荐"><a href="#插件安装-插件推荐" class="headerlink" title="插件安装&amp;插件推荐"></a>插件安装&amp;插件推荐</h2><p>恭喜你美化完成了，但是图有外表没有功能是没有用的，zsh的内置插件库非常丰富，接下来我们来安装插件，用于丰富zsh功能，这些插件安装起来非常简单却非常有用，其实和主题差不多。<br>这里我用最常用的 <strong>git</strong> 插件做演示</p><p>还是一样打开<code>.zshrc</code>文件</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano .zshrc</span><br></pre></td></tr></table></figure></div><p>打开之后找到这一段：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2025-01-05_7bb46.jpg"                      alt="使用nano编辑器打开的.zshrc文件"                ></p><p>插件不多赘述了，写法如下：</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  extract</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><p>上面是我本人的用法，插件推荐：</p><h3 id="git命令缩写插件"><a href="#git命令缩写插件" class="headerlink" title="git命令缩写插件"></a>git命令缩写插件</h3><p>自带插件，可以使用缩写命令, 比如 gaa -&gt; git add –all, 通过alias | grep git查看所有支持缩写命</p><h3 id="extract更好的解压插件"><a href="#extract更好的解压插件" class="headerlink" title="extract更好的解压插件"></a>extract更好的解压插件</h3><p>自带插件，不用再使用复杂的tar来解压压缩包了</p><h3 id="Z快捷目录插件"><a href="#Z快捷目录插件" class="headerlink" title="Z快捷目录插件"></a>Z快捷目录插件</h3><p>自带插件，直接使用<code>z 目录</code>即可快速选择</p><h3 id="zsh-syntax-highlighting命令高亮插件"><a href="#zsh-syntax-highlighting命令高亮插件" class="headerlink" title="zsh-syntax-highlighting命令高亮插件"></a>zsh-syntax-highlighting命令高亮插件</h3><p>命令高亮插件，命令不再只是同一个颜色了</p><p>安装: </p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></div><h3 id="zsh-autosuggestions命令补全插件"><a href="#zsh-autosuggestions命令补全插件" class="headerlink" title="zsh-autosuggestions命令补全插件"></a>zsh-autosuggestions命令补全插件</h3><p>输入时按右方向键→自动补全命</p><p>安装: </p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></div><h2 id="最后分享一下我的zsh配置文件"><a href="#最后分享一下我的zsh配置文件" class="headerlink" title="最后分享一下我的zsh配置文件"></a>最后分享一下我的zsh配置文件</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZSH=<span class="string">&quot;<span class="variable">$HOME</span>/.oh-my-zsh&quot;</span></span><br><span class="line"><span class="built_in">export</span> GRABLE_HOME=/data/data/com.termux/files/home/grable</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GRABLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> GRADLE_HOME=/data/data/com.termux/files/home/gradle</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GRADLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">&quot;xiong-chiamiov&quot;</span></span><br><span class="line"></span><br><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  extract</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br></pre></td></tr></table></figure></div><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;传统Shell(bash)终端实在太难看了，今天来安装一下zsh并使用oh-my-zsh美化Linux终端，这里以Ubuntu22.04做示例，这是我服务器的实操过程。&lt;/p&gt;
&lt;h2 id=&quot;更新软件包列表和安装必要环境&quot;&gt;&lt;a href=&quot;#更新软件包列表和安装必要环境</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="终端美化" scheme="https://yzeblog.dev.tc/tags/%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
    
    <category term="zsh" scheme="https://yzeblog.dev.tc/tags/zsh/"/>
    
    <category term="oh my zsh" scheme="https://yzeblog.dev.tc/tags/oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>Typecho如何开发一个主题-Hello World</title>
    <link href="https://yzeblog.dev.tc/7.html"/>
    <id>https://yzeblog.dev.tc/7.html</id>
    <published>2024-11-20T00:02:00.000Z</published>
    <updated>2025-01-23T12:40:59.818Z</updated>
    
    <content type="html"><![CDATA[<p>好久不见。笔者最近一直忙着给自己写新的Typecho主题，是基于i.zeimg.top写的，顺带出一期Typecho主题的开发教程，这也算很多站友们提的建议，毕竟笔者之前有做过typecho插件开发教程嘛。<br>这期就以开发一个“logo+Hello+后台设置名称”为目标写一个基础的主题来讲解typecho开发主题的基础。</p><p>正常来说，你编写Typecho主题至少需要前端三件套<code>HTML</code>、<code>CSS</code>和<code>JavaScript</code>，以及后端<code>PHP</code>这四门语言，<del>当然如果你开发的主题不需要样式和特效的话只要会HTML和PHP即可</del><br>可兴的是，它们都非常简单，以至于你只需要3个月就可以学习成为一名优秀的PHP全栈开发工程师，其中还包括前端原生和后端数据库，这些是开发主题几乎不需要用到的。</p><p>我们就以Typecho的默认主题“Defeat”作为例子，先看文件结构：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/11/19/GR41cEVh972ebdv.png"                      alt="Typecho默认主题文件结构"                ><br>可以看到有很多文件，笔者给大家解释一下：</p><table><thead><tr><th>文件名</th><th>文件解析</th></tr></thead><tbody><tr><td>404.php</td><td>页面未找到模板</td></tr><tr><td>archive.php</td><td>独立页面、文章通用文件</td></tr><tr><td>comments.php</td><td>评论区模板</td></tr><tr><td>footer.php</td><td>页脚模板</td></tr><tr><td>functions.php</td><td>函数文件、主文件</td></tr><tr><td>header.php</td><td>头部模板</td></tr><tr><td>index.php</td><td>首页模板</td></tr><tr><td>post.php</td><td>文章页模板</td></tr><tr><td>page.php</td><td>独立页面模板</td></tr><tr><td>sidebar.php</td><td>侧边栏模板</td></tr><tr><td>screenshot.png</td><td>预览、主题页展示图</td></tr></tbody></table><p>先来看看index.php，可以看见第一个引入眼帘的是一段注释：</p><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default theme for Typecho</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> Typecho Replica Theme</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Typecho Team</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> http://typecho.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;__TYPECHO_ROOT_DIR__&#x27;</span>)) <span class="keyword">exit</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">need</span>(<span class="string">&#x27;header.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/11/20/tcWEbon9CT4IplM.png"                      alt="index.php部分代码"                ></p><p>代码解析，你可以按照这个把代码改成你自己的内容：</p><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里写主题简介(支持HTML)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> 这里写主题名字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 账号写主题作者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 这里写主题版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> 这里写主题官网或者作者网站</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;__TYPECHO_ROOT_DIR__&#x27;</span>)) <span class="keyword">exit</span>;  <span class="comment">//此处为必要代码</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">need</span>(<span class="string">&#x27;header.php&#x27;</span>); <span class="comment">//引入头部模板</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>必要的说一下，<code>header.php</code>是从HTML文档声明到<code>&lt;head&gt;</code>标签或者<code>&lt;header&gt;</code>标签；</p><blockquote><p>head标签用于定义文档头部，包含元数据如字符编码、关键词等，而header标签则用于定义网页或区块的页眉，通常包括标题和导航栏。 正确使用这两个标签能提升网页的结构和语义化。</p></blockquote><p>同时，index.php内只需包含一半<code>&lt;body&gt;</code>标签即可，也就是说<code>footer.php</code>要从<code>&lt;footer&gt;</code>标签写到<code>&lt;/html&gt;</code>标签，当然了，这个只是笔者个人的建议，也是最常用的写法，可以完全按照个人习惯来写，只要能用即可。</p><p>那么接下来就开始编写主题的首页，本期教程只教如何写一个<code>Hello &lt;name&gt;</code>的主题，其中<code>&lt;name&gt;</code>可以在后台设置，具体的开发方法也差不多是这样对堆叠，文末会写typecho的各种钩子核调用方法。</p><p>接下来我们打开<code>header.php</code>，并写入如下代码：</p><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * helloworld主题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> MengZe2 Hello World</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MengZe2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> 官网</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;__TYPECHO_ROOT_DIR__&#x27;</span>)) <span class="keyword">exit</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">need</span>(<span class="string">&#x27;header.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;<span class="meta">&lt;?php</span> <span class="variable language_">$this</span>-&gt;options-&gt;<span class="title function_ invoke__">title</span>(); <span class="meta">?&gt;</span>&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></div><p>然后打开<code>index.php</code>，写入如下代码：</p><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hello World&lt;h1/&gt;</span><br></pre></td></tr></table></figure></div><p>再打开<code>footer.php</code>，写入代码：</p><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div><p>接下来要实现的是后台设置标题展示hello 名字，同时也能教你们如何创建设置表单并调用设置。<br>打开<code>functions.php</code>，可以看到里面有代码，清空它，并在文件中添加一个themeConfig($form)函数，这是一个钩子函数，因此函数名也是固定的。在函数中添加一个文本控件就可以了，其它常用的控件还有Checkbox、Radio、Select等，我们可以在Typecho&#x2F;Widget&#x2F;Helper&#x2F;Form&#x2F;Element文件夹找到，实例代码：</p><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;__TYPECHO_ROOT_DIR__&#x27;</span>)) <span class="keyword">exit</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">themeConfig</span>(<span class="params"><span class="variable">$form</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$helloname</span> = <span class="keyword">new</span> <span class="title class_">\Typecho\Widget\Helper\Form\Element\Text</span>(</span><br><span class="line">        <span class="string">&#x27;helloname&#x27;</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="title function_ invoke__">_t</span>(<span class="string">&#x27;你的名字&#x27;</span>),</span><br><span class="line">        <span class="title function_ invoke__">_t</span>(<span class="string">&#x27;设置一个显示在Hello 后面的名字变量&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="variable">$form</span>-&gt;<span class="title function_ invoke__">addInput</span>(<span class="variable">$helloname</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>再次打开<code>index.php</code>，修改<code>Hello World</code>为：</p><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Hello <span class="meta">&lt;?php</span> <span class="variable language_">$this</span>-&gt;options-&gt;<span class="title function_ invoke__">helloname</span>(); <span class="meta">?&gt;</span>&lt;/h1&gt;</span><br></pre></td></tr></table></figure></div><p><code>header.php</code>的title也能改改。也就弄好了。<br>保存，typecho后台启用主题，设置名字，打开网站即可预览主题啦。</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久不见。笔者最近一直忙着给自己写新的Typecho主题，是基于i.zeimg.top写的，顺带出一期Typecho主题的开发教程，这也算很多站友们提的建议，毕竟笔者之前有做过typecho插件开发教程嘛。&lt;br&gt;这期就以开发一个“logo+Hello+后台设置名称”为目标</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Typecho" scheme="https://yzeblog.dev.tc/tags/Typecho/"/>
    
    <category term="主题开发" scheme="https://yzeblog.dev.tc/tags/%E4%B8%BB%E9%A2%98%E5%BC%80%E5%8F%91/"/>
    
    <category term="Hello World" scheme="https://yzeblog.dev.tc/tags/Hello-World/"/>
    
  </entry>
  
  <entry>
    <title>来自匿名的故事</title>
    <link href="https://yzeblog.dev.tc/6.html"/>
    <id>https://yzeblog.dev.tc/6.html</id>
    <published>2024-11-06T07:20:00.000Z</published>
    <updated>2025-01-23T12:39:17.006Z</updated>
    
    <content type="html"><![CDATA[<p>故事的开头，是秋天的风和温柔的你。<br>那一天，我们在图书馆，你看见了一本无名小说，故事的主角是林瑶和叶泽，你怒了，说这是什么破小说，我的男主明明是林梦泽，于是你开始写你自己的小说。<br>你说，等麦子熟了那天，你带着丰收嫁给我。<br>22岁那年，我如小说里那般，出了国。你发疯了似的试图阻止我。<br>我本以为回来时，你便嫁给我，可是，24岁回国那年。。我参加了你的婚礼，婚礼上，你和叶泽交换戒指，拥吻。。<br>我静静地看着，没说什么，默默离开了现场，我回到了我出国前住的地方。<br>看见了一本小说，署名是林瑶。<br>翻开第一页，写着<br>那一天，我们在图书馆，我看见了一本无名小说，故事的主角是林瑶和叶泽，我怒了，说这是什么破小说，我的男主明明是林梦泽，于是我开始写这本小说。<br>但是，开始我们的故事之前，我想问你，我的林梦泽，你是否愿意娶我。<br>我和你想从17岁到97岁，一起携手到老。<br>不知不觉，我竟已开始流泪。<br>翻到最后一页，俨然是24岁的林瑶写的。<br>她说，对不起，我等不到你了。<br>我默默合上书，恍惚间，我好像看见了你，我不知道那是不是真的，我只知道我的心脏疼的要命。<br>过了不知道多久，我从满是刺鼻的消毒水味的病房里醒来，旁边，是满眼通红的爸妈。<br>我不知道发生了什么，我也不想知道。<br>出院后，我选择了再度出国。<br>故事的结尾，是凄凉的秋风和站在树下的我。<br>此时的我已经是暮年，我把我的故事讲给了一位来此处爬山的少年听。<br>那少年站在未收的麦田中，不知道在想什么，或许，他也和我一样吧。。<br>我轻轻合上了这本书，全书完</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;故事的开头，是秋天的风和温柔的你。&lt;br&gt;那一天，我们在图书馆，你看见了一本无名小说，故事的主角是林瑶和叶泽，你怒了，说这是什么破小说，我的男主明明是林梦泽，于是你开始写你自己的小说。&lt;br&gt;你说，等麦子熟了那天，你带着丰收嫁给我。&lt;br&gt;22岁那年，我如小说里那般，出了国</summary>
      
    
    
    
    <category term="闲言碎语" scheme="https://yzeblog.dev.tc/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
    <category term="匿名投稿" scheme="https://yzeblog.dev.tc/tags/%E5%8C%BF%E5%90%8D%E6%8A%95%E7%A8%BF/"/>
    
    <category term="爱情故事" scheme="https://yzeblog.dev.tc/tags/%E7%88%B1%E6%83%85%E6%95%85%E4%BA%8B/"/>
    
    <category term="推文" scheme="https://yzeblog.dev.tc/tags/%E6%8E%A8%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>使用VPS架设Minecraft服务器</title>
    <link href="https://yzeblog.dev.tc/5.html"/>
    <id>https://yzeblog.dev.tc/5.html</id>
    <published>2024-11-02T22:31:00.000Z</published>
    <updated>2025-01-23T12:37:53.578Z</updated>
    
    <content type="html"><![CDATA[<p>Minecraft是是一个开放世界沙盒游戏，但是大多数时间都是我们一个人在玩，非常孤独，玩别人的服务器但是限制多多，很多人就想自己当腐竹，但是又不知道怎么开服务器，那么我今天就来说说怎么架设一个基岩版&#x2F;Java版服务器。</p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ol><li>一台性能足够的Ubuntu系统服务器，2h4g起步</li><li>一个SSH连接工具，电脑手机均可</li><li>脑子</li></ol><h2 id="安装MCSM面板"><a href="#安装MCSM面板" class="headerlink" title="安装MCSM面板"></a>安装MCSM面板</h2><p>MCSManager 是一款开源，分布式，一键部署，支持 Minecraft 和 Steam 游戏服务器 的控制面板。MCSManager 在 Minecraft 和 其他游戏 社区内中已有一定的流行程度，它可以帮助你集中管理多个物理服务器，动态在任何主机上创建游戏服务端，并且提供安全可靠的多用户权限系统，可以很轻松的帮助你管理多个服务器。</p><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>默认情况下，一键安装脚本应该已经包含一切所需环境。如果是手动安装的情况下，你需满足 Node 16+ 运行时环境。Node 环境下载前往：<a class="link"   href="https://nodejs.org/zh-cn/" >https://nodejs.org/zh-cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><h3 id="下载一键安装脚本"><a href="#下载一键安装脚本" class="headerlink" title="下载一键安装脚本"></a>下载一键安装脚本</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su -c &quot;wget -qO- https://mcsmanager.com/install-v10.sh | bash&quot;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://attach.klpbbs.com/forum/202405/03/175229w55hscu9rs53cmac.png"                      alt="Image"                ></p><h3 id="启动面板"><a href="#启动面板" class="headerlink" title="启动面板"></a>启动面板</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先启动面板守护进程。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是用于进程控制，终端管理的服务进程。</span></span><br><span class="line">systemctl start mcsm-daemon.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再启动面板 Web 服务。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是用来实现支持网页访问和用户管理的服务。</span></span><br><span class="line">systemctl start mcsm-web.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启面板命令</span></span><br><span class="line">systemctl restart mcsm-daemon.service</span><br><span class="line">systemctl restart mcsm-web.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止面板命令</span></span><br><span class="line">systemctl stop mcsm-web.service</span><br><span class="line">systemctl stop mcsm-daemon.service</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://zs-data.klpbbs.com:11179/forum/202405/03/175858bsnn1sq44pd3313i.png"                      alt="Image"                ></p><h2 id="架设基岩版服务器"><a href="#架设基岩版服务器" class="headerlink" title="架设基岩版服务器"></a>架设基岩版服务器</h2><p>前往官网下载服务端：</p><p><a class="link"   href="https://www.minecraft.net/zh-hans/download/server/bedrock" >https://www.minecraft.net/zh-hans/download/server/bedrock<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><p>下滑，找到Ubuntu版的服务端，点击下载：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://zs-data.klpbbs.com:11179/forum/202405/03/175532gn2obiks75uk3bon.jpg"                      alt="Image"                ></p><p>下载速度慢可以挂梯子</p><h2 id="接下来按照图片一步一步来"><a href="#接下来按照图片一步一步来" class="headerlink" title="接下来按照图片一步一步来"></a>接下来按照图片一步一步来</h2><p>点击侧边栏</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://zs-data.klpbbs.com:11179/forum/202405/03/175531f6116e6kvkn3daoe.png"                      alt="Image"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://zs-data.klpbbs.com:11179/forum/202405/03/175531z0hqdpiyljqpqbdw.jpg"                      alt="Image"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://zs-data.klpbbs.com:11179/forum/202405/03/175530nepv0wuekocm6976.jpg"                      alt="Image"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://attach.klpbbs.com/forum/202405/03/175530owpzywr4kc49r91h.jpg"                      alt="Image"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://attach.klpbbs.com/forum/202405/03/175529f860ierrqoeqarwo.png"                      alt="Image"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://zs-data.klpbbs.com:11179/forum/202405/03/175529bcx9j4h7e9sjyoe7.jpg"                      alt="Image"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img2.imgtp.com/2024/05/02/9Aharsrb.jpg"                      alt="Image"                ></p><p>我在这里翻过车，一定要记住，基岩版的启动命令是：</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bedrock_server</span><br></pre></td></tr></table></figure></div><p>Java也大差不差，下载服务端然后启动服务器即可。</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Minecraft是是一个开放世界沙盒游戏，但是大多数时间都是我们一个人在玩，非常孤独，玩别人的服务器但是限制多多，很多人就想自己当腐竹，但是又不知道怎么开服务器，那么我今天就来说说怎么架设一个基岩版&amp;#x2F;Java版服务器。&lt;/p&gt;
&lt;h2 id=&quot;准备工具&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="基岩版" scheme="https://yzeblog.dev.tc/tags/%E5%9F%BA%E5%B2%A9%E7%89%88/"/>
    
    <category term="我的世界" scheme="https://yzeblog.dev.tc/tags/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    
    <category term="我的世界开服教程" scheme="https://yzeblog.dev.tc/tags/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>给Hexo博客安排上Github Action自动化部署</title>
    <link href="https://yzeblog.dev.tc/4.html"/>
    <id>https://yzeblog.dev.tc/4.html</id>
    <published>2024-11-02T22:24:00.000Z</published>
    <updated>2025-01-23T12:37:28.650Z</updated>
    
    <content type="html"><![CDATA[<p>我不是换hexo了吗，一直是使用Spck Editor写文章，每次写好文章都要push一次，非常麻烦，最近在群友那了解到有Github Action自动化部署，可以写好文章自动部署到github pages，而且github的编辑器也是非常好用的，写好提交就能自动发送，–怎么有点像SSR了–，于是我就开始了这一个半小时的折腾…<br><strong>没有电脑，使用安卓设备折腾！</strong></p><h2 id="如果你没有Hexo博客，那么请看这里，如果有那就请跳过本节"><a href="#如果你没有Hexo博客，那么请看这里，如果有那就请跳过本节" class="headerlink" title="如果你没有Hexo博客，那么请看这里，如果有那就请跳过本节"></a>如果你没有Hexo博客，那么请看这里，如果有那就请跳过本节</h2><p>新建一个Hexo博客，这里使用ZeroTermux操作。<br>打开ZeroTermux，运行：</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install nodejs</span><br></pre></td></tr></table></figure></div><p>安装完成之后使用</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></div><p>结果如下或类似即可：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/aAT7Fvn8yWKdGL5.png"                      alt="20240824095205-b5fa9b10afd7c8f8b75e3b591fb9466a.png"                ></p><p>安装并初始化一个博客</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli</span><br></pre></td></tr></table></figure></div><p>等待时间可能久一点。</p><p>然后</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></div><p>就行了，然后把hexo的目录移动到外部储存的目录，就行了</p><h2 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h2><p>去github上新建一个仓库，我这里名字就叫MyHexo，可以随便，要设置成私有仓库。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/uxryP9egDRmTIJi.png"                      alt="20240824093520-af2a6043cdd4aa188db1fa85acd7df60.png"                ></p><p>创建好仓库之后，在本地新建一个文件夹，我这里是手机，使用Spck Editor操作，打开MT管理器，先进入<code>/storage/emulated/0/Android/data/io.spck/files/</code>文件夹，新建一个叫MyHexo的文件夹。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/Wrgp9Vz6j5IBmGC.png"                      alt="2024082409418-6feeea513845cb134bd54180aaf00770.png"                ></p><p>此时，进入你之hexo的目录，或者新建一个hexo博客(待会会讲)，把右边窗口圈住的文件&#x2F;文件夹移动(或者复制)到左边的文件夹，<strong>注意！是右边圈出的这些文件！</strong></p><p>然后打开spck editor，刚刚的文件夹名称就是项目名称，按照图片操作<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/toPWBEuexADfMrT.jpg"                      alt="20240824101358-05e40c950674e974dec0198df7ee3b6c.jpg"                ></p><p>点击版本库图标，初始化版本库<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/nGbmODZ3NfJhPga.png"                      alt="20240824101358-d552dcd5b0fe6b3c48c8eb20a6b97d82.png"                ></p><p>点击添加远端<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/ukoeSBF63y7TiQ4.png"                      alt="20240824101358-af6d3c2723c8d269b8d8d20ee454117a.png"                ></p><p>添加远端<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/xeaoyvW8RbKzcgV.png"                      alt="20240824101358-317991a3189a3c12f8a5463507a69f42.png"                ></p><p>去github那边申请一个key，链接<a class="link"   href="https://github.com/settings/tokens" >https://github.com/settings/tokens<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/TI9xnRlLVF3S5CY.jpg"                      alt="20240824102300-8fa208fb0f38d88a625f5d926c79f9a6.jpg"                ><br><strong>注意！密钥只会显示一遍，记得复制粘贴！</strong></p><p>申请好之后，去spck那边配置。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/LWFfPzArclDedO8.jpg"                      alt="20240824102530-38e274178553600bcdb0e110d18b214f.jpg"                ></p><p>把文件提交，然后推送。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/TYDKCBdavreNwzp.png"                      alt="20240824101358-24d9eda0acb925742c84a65655f5de41.png"                ></p><p>推送完成之后就该配置Github Action了(此处折腾的时候忘记截图了。</p><blockquote><p>简单说，就是把hexo博客编译前的源代码上传到github代码仓库，Action在代码发生变动的时候，自动通过安装一系列nodejs环境和相关依赖，编译生成html页面到github pages仓库。再简单点说，就是把本地生成博客的工作，全部交给Action执行。好处就是随时随地都能修改或增加博文<br>  ——来自<a class="link"   href="https://isedu.top/" >https://isedu.top/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p></blockquote><p>打开刚刚新建的仓库的Settings-&gt; Secrets and variables -&gt; Actions -&gt; New repository secret，</p><p>需要添加三次，分别是GITHUBTOKEN，GITHUBUSERNAME和GITHUBEMAIL</p><table><thead><tr><th>变量名</th><th>常量释义</th></tr></thead><tbody><tr><td>GITHUBMAIL</td><td>Github 用户邮箱地址</td></tr><tr><td>GITHUBTOKEN</td><td>Github token</td></tr><tr><td>GITHUBUSERNAME</td><td>Github 用户名</td></tr></tbody></table><p>添加好之后，去Actions-&gt; set up a workflow yourself设置动作流。</p><p>复制粘贴如下代码：</p><div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;16.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span> <span class="comment">#此处master:master 指从本地的master分支提交到远程仓库的master分支(不是博客的分支写master即可)，若远程仓库没有对应分支则新建一个。如有其他需要，可以根据自己的需求更改。</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cd ./public</span></span><br><span class="line"><span class="string">        git init</span></span><br><span class="line"><span class="string">        git config --global user.name &#x27;$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;&#x27;</span></span><br><span class="line"><span class="string">        git config --global user.email &#x27;$&#123;&#123; secrets.GITHUBEMAIL &#125;&#125;&#x27;</span></span><br><span class="line"><span class="string">        git add .</span></span><br><span class="line"><span class="string">        git commit -m &quot;$&#123;&#123; github.event.head_commit.message &#125;&#125; $(date +&quot;%Z %Y-%m-%d %A %H:%M:%S&quot;) Updated By Github Actions&quot;</span></span><br><span class="line"><span class="string">        git push --force --quiet &quot;https://$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;:$&#123;&#123; secrets.GITHUBTOKEN &#125;&#125;@github.com/$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;/$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;.github.io.git&quot; master:master  # GitHub配置</span></span><br></pre></td></tr></table></figure></div><p>如果你的本地仓库为main而不是master，那么这样改：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/lqG4QZb9g1YVfvX.png"                      alt="20240824133621-9879f6a269051e99ae8aa745bcc9d08b.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/7hIjab3QTP2xNps.png"                      alt="20240824133621-23752fa10ef102867878ee95dcf6b801.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/08/24/ZsValeRKALMwDcy.png"                      alt="20240824133621-c9e45e08cbae7957c57605535d133869.png"                ></p><p>稍作修改之后点击Commit changes…</p><p>去你的github pages仓库把pages仓库改成你在上面代码设置的就行了</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我不是换hexo了吗，一直是使用Spck Editor写文章，每次写好文章都要push一次，非常麻烦，最近在群友那了解到有Github Action自动化部署，可以写好文章自动部署到github pages，而且github的编辑器也是非常好用的，写好提交就能自动发送，–怎</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Hexo" scheme="https://yzeblog.dev.tc/tags/Hexo/"/>
    
    <category term="Github Action" scheme="https://yzeblog.dev.tc/tags/Github-Action/"/>
    
  </entry>
  
  <entry>
    <title>买杯咖啡，然后花一杯咖啡的时间和我入门Node.js</title>
    <link href="https://yzeblog.dev.tc/3.html"/>
    <id>https://yzeblog.dev.tc/3.html</id>
    <published>2024-11-01T10:10:00.000Z</published>
    <updated>2025-01-23T12:37:01.534Z</updated>
    
    <content type="html"><![CDATA[<p>笔者自今年的下半年也就是八九月的时候从PHP转到了Node.js，因为Node.js不管是前端还是全栈真地位都很重要，尤其前端，还有js全栈。但是笔者本人学的杂，没花太多时间去系统化的进行一个学习，也没有一个完整的学习思路。每次自己要做点什么东西的时候都要到处查，而且很堵，代码优化也是稀烂。准备重新学习和整理Node.js的一些体系，然后把自己学习的总结发出来，大佬们如果觉得有写的不对的可以发评论区指教指教。<br>学习Node.js之前得先了解基本的JavaScript知识。</p><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么?"></a>Node.js是什么?</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/11/02/PWyEGtNIwHsqjKb.png"                      alt="Node.js的logo"                ></p><p>这个。。。官网给的简介是：</p><blockquote><p>Node.js® 是一个免费、开源、跨平台的 JavaScript 运行时环境，它让开发人员能够创建服务器、Web 应用、命令行工具和脚本。</p></blockquote><p>准确来说，Node.js不是一个新的编程语言也不是一个JavaScript框架，而是是一个JavaScript运行时，用来支持JavaScript运行，类比C&#x2F;C++的GUN编译器。</p><p>先用一个类比的示例来进行解释。比如，有人向你发送了一个扩展名为docx的文档，你想要查看其中的内容，于是打开记事本，把该文档拖到记事本的窗口里，然后就看到了一大堆乱码。这是因为记事本程序并不能识别这种格式的文档，你需要先安装Microsoft Office 2007以上版本的软件，然后用Word程序打开，这样才能看到正确解码的内容。</p><p>如果把示例中的docx文件看作程序，那么Word就是它的运行环境，这就像JavaScript程序与浏览器的关系一样。如果你了解过现代浏览器的结构，就会知道其中包含了JavaScript引擎。</p><p>以前，想要查看docx文件的内容，几乎只能依赖于Microsoft Office，后来金山公司也推出了办公软件工具WPS Office，它也能够解释和运行docx文件，于是docx文件就有了多个可运行环境，而Node.js对于JavaScript语言的意义也是如此。</p><p>为了更加直观地理解运行时的概念，你可以尝试一个有趣的实验，自己创造一种简单的编程语言，规定一些简易的语法，然后使用JavaScript来编写能够解释这些语法的代码。</p><p>例如，用自创的语言编写一些简单的程序，最后通过Node.js运行JavaScript程序，并在程序中用Node.js提供的文件读写接口（File API）读入你用自创的编程语言编写的程序，看看它能否被正确地解释和执行。待你了解了JavaScript是如何完成对自创编程语言的解释和执行的，自然就能明白在Node.js运行环境中，C&#x2F;C++对JavaScript脚本做了什么事情。</p><p>当然，真实的代码解释执行过程要复杂得多，很多关键的思想和技术也被应用在前端框架的设计中，这些可以在今后的学习中慢慢消化。</p><h2 id="理解运行时"><a href="#理解运行时" class="headerlink" title="理解运行时"></a>理解运行时</h2><p>上面提到了 Node.js 给 JavaScript 提供了一个运行环境，提供这个运行环境是用来做啥呢？<br>我们都知道浏览器本身也给 JavaScript 提供了一个运行环境，在这个环境中，JS 可以调用浏览器提供的一些 API ，来调用浏览器的一些功能，比如 DOM 操作、window 对象、如定时器等等，这些 API 都是浏览器的 JavaScript 运行时环境提供的，而在 chrome 浏览器，这个运行时环境是 Chromium，它会通过执行引擎 V8 在 JavaScript 执行过程中注入这些 API（运行时环境Chromium和执行引擎V8是从趣学 Node.js中看到的这个说法，查询到的其他资料很少会明确指出）。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/11/01/UAxajh5t3LM1s4X.png"                      alt="关系图"                ></p><p><strong>注意，V8引擎会解析和运行<code>choromium</code>提供的api</strong><br>扩展一下就是：JavaScript 运行时 指的是提供给 API 给 JavaScript 来调用外界程序功能的运行环境。<br>Node.js 也是使用 V8 引擎 进行解析和执行 JavaScript ，然后给其注入其指定的 API ，然后提供 JavaScript 运行的环境，在这个环境中， JavaScript 就可以通过 V8引擎 调用 Node.js 运行时环境 提供的 API 来调用服务器的一些功能，比如文件读取、网络请求等功能。</p><h2 id="如何安装Node-js"><a href="#如何安装Node-js" class="headerlink" title="如何安装Node.js"></a>如何安装Node.js</h2><p>安装其实很简单，直接去<a class="link"   href="https://nodejs.org/download/" >https://nodejs.org/download/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 下载即可。</p><p>Ubuntu系统下可以使用：</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nodejs</span><br></pre></td></tr></table></figure></div><p>还有npm包管理器</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install npm</span><br></pre></td></tr></table></figure></div><h2 id="NPM包管理器"><a href="#NPM包管理器" class="headerlink" title="NPM包管理器"></a>NPM包管理器</h2><p>npm是Node.js的标准包管理器。</p><p>据报道，2022年9月，npm注册表中列出了超过210万个软件包，使其成为地球上最大的单一语言代码库，你可以肯定有一个软件包（几乎！）一切.</p><p>它最初是一种下载和管理Node.js包的依赖关系的方法，但后来它也成为前端JavaScript中使用的工具。</p><p>npm安装，更新和管理项目依赖项的下载。冗余是预构建的代码片段，例如库和包，您的Node.js应用程序需要这些代码片段。</p><p><strong>一次性安装项目依赖</strong></p><p>如果一个项目有一个package.json文件</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></div><p>它将在node_modules文件夹中安装项目所需的所有内容，如果它还不存在，则创建它。</p><p><strong>Installing a single package安装单个软件包</strong></p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;package-name&gt;</span><br></pre></td></tr></table></figure></div><p>这样即可</p><p>此外，从npm 5开始，此命令将<package-name>添加到package.json文件依赖项中。在版本5之前，你需要添加参数–save。</p><p>通常你会看到更多的参数添加到这个命令：</p><ul><li>–save-dev安装并将条目添加到package.json文件devendencies中</li><li>–no-save安装但不将条目添加到package.json文件依赖项</li><li>–save-optional安装并将条目添加到package.json文件的optionalconfigurations</li><li>–no-optional将阻止安装可选依赖项</li></ul><p>其他的也不好多说。</p><h2 id="Node-js能干什么"><a href="#Node-js能干什么" class="headerlink" title="Node.js能干什么"></a>Node.js能干什么</h2><p><strong>创建高性能Web服务器</strong><br>许多Node.js的初学者应该都见过那段只用了不到10行代码就建立了一个Web服务器的经典示例。尽管对于前端开发人员而言，他们依然需要学习基本的Web服务器知识，才能更加得心应手地进行服务端开发，但与配置Apache或Nginx来实现同样的功能相比，这样的学习成本已经非常低了，毕竟前端开发人员可以使用自己最熟悉的JavaScript语言来构建应用。</p><p>另一方面，在Node.js中，代码可以与各类数据库进行交互，这就意味着前端工程师可以直接使用JavaScript语言编写与数据库进行交互的代码（尽管在大型应用中并不推荐这样做），且编写业务逻辑代码时，Node.js与其他后端语言没有明显的差别，因此前端开发人员不用切换开发语言就可以掌握全栈开发的技能。</p><p>由于Node.js底层使用的是异步非阻塞的I&#x2F;O机制，因此它更适合于I&#x2F;O密集、少量业务逻辑和计算消耗的场景。尽管解释型脚本语言本身并不适合执行计算型任务，但Node.js底层是由C&#x2F;C++代码编写的，并且提供了JavaScript代码层与C&#x2F;C++代码交互的接口，面对计算密集型任务时，Node.js只需要作为启动脚本调用底层C&#x2F;C++程序来完成计算密集型任务就可以了。</p><p>服务端执行的任务大体可分为读写密集型任务和计算密集型任务。对于读写密集型任务而言，CPU更多的时间是在等待磁盘读写，使用率并不高，在Web服务器上进行的网络通信、信息传输和磁盘读写等都属于读写操作，它对磁盘的响应速度和传输效率有着更高的需求。</p><p>相较而言，计算密集型任务对CPU的运算能力要求更高，但对磁盘读写造成的性能负担很小，计算过程中通常也不需要与I&#x2F;O接口进行交互，可直接、高效地在内存中执行，这类任务的计算过程通常比较复杂，例如需要实现某些加密算法或者矩阵计算等。</p><p>大型架构的后端技术选型需要考虑的因素更为复杂，Node.js设计之初并没有准备承担这项任务，就连Node.js之父Ryan Dhal自己也说，在面对大型服务端应用开发时，Node.js的开发体验不如Go语言。</p><p>但是，全世界目前有600多种编程语言，没有任何一种语言能够解决所有问题，语言只是承载和传递程序设计思想的媒介，如何为目标场景选择一项合适的技术，或许是开发人员更应该关注的问题。</p><p>当你在前端领域有一定的积累时，很多前辈都会推荐你继续学习Java或C++等更为完备也更为复杂的语言，这样做的目的并不仅仅是扩展能力边界，更多的是希望你能够跳出一种编程语言的束缚，学习和体会编程语言背后的思想。</p><p><del>笔者知道的Node.js只能用来干这个了。。。</del></p><h2 id="招黑的JavaScript工程师"><a href="#招黑的JavaScript工程师" class="headerlink" title="招黑的JavaScript工程师"></a>招黑的JavaScript工程师</h2><p>Node.js凭借创建高性能Web服务器以及与数据库通信的能力，为前端开发人员提供了服务端开发的机会。早在几年之前，开发人员就可以使用MEAN（MongoDB + Express + Angular.js + Node.js）这种纯JavaScript技术栈完成闭环的业务逻辑开发，很多前端工程师也因此自诩为全栈工程师。</p><p>不可否认当年这样的技术栈确实可以使许多中小型团队以更少的人力和时间就把产品从创意阶段推进到线上，但这也使得JavaScript开发人员成为业内最招黑的全栈工程师，因为业务逻辑的实现并不足以撑起全栈工程师进行后端开发。</p><p>在企业级开发中，后端开发仍然以Java工程师为主力军。</p><p>由于Java本身具有强类型和完整的面向对象的特性，因此后端工程师的编码质量和程序设计意识整体要高于前端工程师，再加上与Java开发体验非常相似的Angular技术栈的支持（Angular本身就是一项由Google的Java工程师开发和维护的技术），后端工程师很容易就能编写出规范性和可维护性都不输于前端开发人员的代码，这大大提升了Java全栈工程师的竞争力。</p><p>如果不是工程化配置和CSS实战经验形成的门槛，前端工程师在面对后端全栈工程师时很难体现其自身价值。然而，前端开发出身的工程师在使用Node.js技术栈进行服务端开发时却没有那么顺利，最流行的Express和Koa框架，仅仅提供了框架和基本中间件，要想实现更多的功能，还需要引入或者自行开发大量中间件。</p><p>这时开发人员之间的差别就会表现得非常明显，即使完全不懂Node.js，后端开发人员也很清楚自己应该寻找具备日志记录、错误追踪、会话管理、安全校验、性能监控、对象关系映射（ORM）、数据库连接等功能的模块或中间件，而普通的前端开发人员却除了业务逻辑的增删改查外，往往连使用“try…catch…”语句捕获运行时错误的意识都没有。</p><p>前端工程师很容易只考虑业务逻辑一切正常的情况，只要主流程能够正常运行，就觉得万事大吉了，然而在真实的开发过程中，往往是那些没有覆盖到的边界情况需要花费更多的精力。</p><p>把后端开发等同于编写业务逻辑代码，就好像把前端开发等同于编写静态页面代码一样。如果真的想成为全栈工程师，需要用一颗谦虚求知的心，踏踏实实地去学习那些陌生的知识，学习的过程可能充满艰辛，但你一定会受益于所学的结果。</p><h2 id="几段代码："><a href="#几段代码：" class="headerlink" title="几段代码："></a>几段代码：</h2><h3 id="创建一个HTTP服务器"><a href="#创建一个HTTP服务器" class="headerlink" title="创建一个HTTP服务器"></a>创建一个HTTP服务器</h3><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createServer &#125; <span class="keyword">from</span> <span class="string">&#x27;node:http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&#x27;Hello World!\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Listening on 127.0.0.1:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="写入测试"><a href="#写入测试" class="headerlink" title="写入测试"></a>写入测试</h3><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> assert <span class="keyword">from</span> <span class="string">&#x27;node:assert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&#x27;node:test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;that 1 is equal 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  assert.<span class="title function_">strictEqual</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;that throws as 1 is not equal 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  assert.<span class="title function_">strictEqual</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>菜鸟教程 上对 Node.js 的定义：</p><ul><li>Node.js 就是运行在服务端的 JavaScript。</li><li>Node.js 是一个基于 Chrome JavaScript 运行时 建立的一个平台。</li><li>Node.js 是一个事件驱动 I&#x2F;O 服务端 JavaScript 环境，基于 Google 的 V8 引擎 ，V8 引擎 执行 Javascript 的速度非常快，性能非常好。</li></ul><p>笔者觉得从不同角度来看也可以这样定义。</p><ul><li>第 1 点，可以用于区分它和浏览器端运行的 JavaScript。</li><li>第 2 点，可以说明它是一个应用程序，用于支持 JavaScript 运行时建立的一个应用程序。因为 Node.js 本身也是一个开源软件，它在服务器上的安装提供了 Node 程序，该程序本身可以使 JavaScript 文件在该服务器上执行。</li><li>第 3 点，就是简单描述 Node.js，和官方的定义最接近。</li></ul><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;笔者自今年的下半年也就是八九月的时候从PHP转到了Node.js，因为Node.js不管是前端还是全栈真地位都很重要，尤其前端，还有js全栈。但是笔者本人学的杂，没花太多时间去系统化的进行一个学习，也没有一个完整的学习思路。每次自己要做点什么东西的时候都要到处查，而且很堵，</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="JavaScript" scheme="https://yzeblog.dev.tc/tags/JavaScript/"/>
    
    <category term="Nodejs" scheme="https://yzeblog.dev.tc/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>自五月以来使用简幻欢的感受</title>
    <link href="https://yzeblog.dev.tc/2.html"/>
    <id>https://yzeblog.dev.tc/2.html</id>
    <published>2024-10-31T04:39:00.000Z</published>
    <updated>2025-01-23T12:29:37.654Z</updated>
    
    <content type="html"><![CDATA[<p>简幻欢，一个免费开服平台，作为免费开服领域的领导者，它一直是一个备受好评的平台，虽说好评多，也有一部分社区对它是褒贬不一，有说养活了一大堆伸手党的也有说它单纯超开引流的；俗话说得好，实践才是硬道理，那么它到底怎么样，所以今天来说说笔者半年以来使用简幻欢评&#x2F;批。</p><p>最开始笔者是在simpfun v3了解到简幻欢的，当时还开了一个互通服呢，也通过简幻欢认识到了大佬@柠枺，当时不了解simpfun的签到机制导致服务器被删，也自然而然不开了。服务器仅存活了不到一周。后面呢@柠枺在疫情期间开了个xin服，使用的也是simpfunv3，记得那个服务器活了挺久的。最开始有的好像还是对接的翼龙面板。</p><p>后到2024年5月左右，我接手了Astro服务器，开始重新使用simpfun，此时的simpfun已经是v4版本了，绑定微信之后付了一块钱认证费用 也能理解其实，一个是防止滥用，二个也能回一点点本可以让平台开的更久。签到问答机制也让我不太爽，因为非常容易发错字，尤其是九键用户。个人建议是出一个问答题目错别字纠正功能。</p><blockquote><p>依笔者个人来说，最讨厌的机制就是ip白名单机制，每次访问面版都要先进一次小程序，但是小程序后面出现的“访问网站”功能完美解决了这个问题，直接小程序管理服务器，也挺好用的。</p></blockquote><p>目前Astro因为个人问题已经解散了，目前用simpfun开了个互通联机服，性能方面不用说。网络也是非常快，具体可以看我上篇文章。因为是Linux机器，如果开的是Java镜像，内存回收会有问题，目前simpfun已经完全下架windows节点，windows服务器均已换成wine，所以开服参数这边尽量做好优化。</p><p>simpfun非pro版不适合多人管理，因为ip白名单机制，且有说过禁止一号多用，管理员那边给出的建议是开Pro版，免费版不推荐隔得远的团队使用简作为开服平台，或者注册一个公用微信号。尽管这可能会导致公用微信号封禁。笔者是推荐管理层住一起的，毕竟闹矛盾也更容易打起来（不是），管理也方便些（见面的车费都够买一台服务器了）。<br>实在是要用简作为多人管理的服务器，那就只能推荐开pro版了，可以无视限制，尽管不能免费了但是价格比其他厂商还是低一些，也算是给公益项目的一点小支持了，如果你想买低价vps，可以看看简幻云。</p><p>之前做教程有对simpfun的机器测评过，130积分的A.A.M.L(4h8g R9-5900x)机器，官方给出的CPUZ分数是640，自己测试没办法有标准测评，点了9w个TNT，服务器扛住了，最低tps仍有7，最高mspt也只有900多，PCJava关爆炸渲染仅100多延迟，手机基岩版直接闪退。且服务器在粘贴完整版女武神空间站时无延迟，除了8g内存不够用以外其他的都好，这也没办法，玩的人多且Linux Java的内存回收本来就不咋地。如果对性能要求不高的普通联机服务器可以购买双倍签到卡使用B+.A.M+.L或者B-.I.L.L机器，5-10个人完全够用，中大型机器也能扛住，大型机器可能要稍微报备。simpfun的端口是直接支持TCP&#x2F;udp的，不需要额外开启，如果你在开基岩版服务器还可以不新建端口开网站地图（新建端口一次性收取1500积分，单实例上限50个）。<br>simpfun是支持自定义域名的，直接解析就能用，还支持srv解析，且同时提供两个免费域名：96666.fun和play.simpfun.cn，我个人也提供免费域名，直接zeimg.top:你的端口即可连接Java&#x2F;be服务器，还有就是simpfun不止可以开mc服务器，有非常多的预设镜像，还支持Python和Java得自定义镜像，实在不行还能调用wine自己开服，只要你积分够 啥游戏都能开。</p><p>笔者建议部分强制性的机制有需要考虑放宽些，也希望重新开放QQ小程序，因为如果人没有微信的话就一定用不了这个平台，还是会有客流量流失，尽管QQ小程序有被破解的风险，但是加强记录功能和反破解应该勉强能用。没记错的话QQ小程序已经有被破解先例了。还有就是磁盘检测还是得改?，这玩意还是没有用，得用sftp手动看。<br>simpfun的邀请机制非常好评！好友秒变造分机！拉一个人30积分+3钻石也是非常丰富得奖励好吧，还有防小号机制，好友每天签到还送5积分，变Pro还有更多积分，简直爽死（</p><p>笔者对simpfun的评价是，好用但需要继续改进。</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简幻欢，一个免费开服平台，作为免费开服领域的领导者，它一直是一个备受好评的平台，虽说好评多，也有一部分社区对它是褒贬不一，有说养活了一大堆伸手党的也有说它单纯超开引流的；俗话说得好，实践才是硬道理，那么它到底怎么样，所以今天来说说笔者半年以来使用简幻欢评&amp;#x2F;批。&lt;/</summary>
      
    
    
    
    <category term="闲言碎语" scheme="https://yzeblog.dev.tc/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
    <category term="简幻欢" scheme="https://yzeblog.dev.tc/tags/%E7%AE%80%E5%B9%BB%E6%AC%A2/"/>
    
  </entry>
  
  <entry>
    <title>使用简幻欢免费搭建Minecraft 互通服务器</title>
    <link href="https://yzeblog.dev.tc/1.html"/>
    <id>https://yzeblog.dev.tc/1.html</id>
    <published>2024-10-31T04:34:00.000Z</published>
    <updated>2025-01-23T12:35:40.826Z</updated>
    
    <content type="html"><![CDATA[<p>国庆节快到了，这里梦泽提前祝大家国庆节快乐<br>七天小长假说短不短，说长不长。刚好够开一个minecraft互通联机服务器。<br>于是就有很多宅家腐竹想开一个服务器，但苦于没钱而且不会开服。<br>这里梦泽就来说一下如何使用简幻欢免费开一个Minecraft互通(基岩版高优化)服务器，国庆节七天也够毕业了。</p><h2 id="简幻欢是什么"><a href="#简幻欢是什么" class="headerlink" title="简幻欢是什么?"></a>简幻欢是什么?</h2><p>简幻欢是一个由沈阳简幻网络科技有限公司在2018能开放的minecraft&#x2F;泰拉瑞亚&#x2F;铁锈战争&#x2F;幻兽帕鲁等游戏的免费开服平台。<br>在简幻欢可以通过签到免费获得服务器时长，仅每天签到足够长期使用一个4核16G配置的服务器。<del>平台日活上千</del><br><strong>你需要缴纳一元认证费用，该费用是您开设服务器唯一成本，不予退还。</strong></p><h2 id="准备开服"><a href="#准备开服" class="headerlink" title="准备开服"></a>准备开服</h2><p>这里使用@柠枺(config.asia)制作的互通整合包<br>柠枺生电互通基础端<a class="link"   href="https://www.minebbs.com/resources/1-21-1-21-1-leaves-tpa-home.9012/" >https://www.minebbs.com/resources/1-21-1-21-1-leaves-tpa-home.9012/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>使用简幻欢的免费4h16g服务器开设。</p><h2 id="开服"><a href="#开服" class="headerlink" title="开服"></a>开服</h2><p>先去简幻欢注册：<br><a class="link"   href="https://simpfun.cn/auth?type=register&code=28647807" >https://simpfun.cn/auth?type=register&amp;code=28647807<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>使用我的注册码：286478072 可以获得额外30积分哦<br>注册登录应该不用多说。<br>注册好之后，记住你的用户名。<br>去微信搜索“简幻欢”，打开小程序，点绑定用户，输入你的用户名并支付1元认证费用。<br>接下来点击签到可以获得50积分。<br>好的开始开服。<br>下载完成之后前往简幻欢。<br>点击新建实例：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/xDgBpfn4quXdv2y.png"                      alt="20240927091453-a9f0d59e895ec1e1a58b43a2afa59067.png"                ></p><p>选择自定义镜像，下一步。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/4eGwtSmVozKrH6b.png"                      alt="20240927091720-f373b7c0e87c6c05a7a80a3c53b7e2a7.png"                ></p><p>点击java，下一步。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/o1FMPajSey9AbJm.png"                      alt="20240927091801-b522249d56c5d832310a5a59dab441f1.png"                ></p><p>这里只有这一个，选择这个，下一步：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/qxiVyY6HuXUEw5S.png"                      alt="20240927091829-2dcc42121979c8294b0c08be66f690fb.png"                ></p><p>选择一个50积分的实例。<br>目前可以选择的有：<br>C.I.L.L<br>CPU:4核 内存:16G<br>硬盘:16GB<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/aQA9XLFj3miItfq.png"                      alt="20240927092111-7e13de6401ce23817f7cf4461eb64b22.png"                ></p><p>C+.I.M+.L<br>CPU:4核 内存:12G<br>硬盘:16GB<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/iuEqOtHJhKfFCMp.png"                      alt="20240927092157-dc8857bf25d856715e583ba986421561.png"                ></p><p>C++.I.M.L<br>CPU:4核 内存:8G<br>硬盘:16GB<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/SvWIR3i9b18Zxyz.png"                      alt="20240927091917-cfbe0809f14d64da92346cbcb8ee5c7c.png"                ></p><p>实例命名方式为[CPU级别.CPU厂商.具体配置.操作系统]<br>CPU级别以字母[C,B,A,S]等分级，代表具体CPU性能，其中性能S&gt;A&gt;B&gt;C<br>CPU厂商以字母[A,I]分类，代表AMD,Intel<br>具体配置以字母[XS,S,M,L,XL]等分类，代表各个配置套餐<br>操作系统以字母[L,W]分类，代表实例操作系统(Linux,Windows)<br>具体看：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/fbdUZ8geMDJI9PN.png"                      alt="20240927092642-eeec6f92883936cbadaa7a7af4552bbb.png"                ></p><p>这里梦泽选择第三个。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/SvWIR3i9b18Zxyz.png"                      alt="20240927091917-cfbe0809f14d64da92346cbcb8ee5c7c.png"                ></p><p>如果你显示的页面和梦泽一样或者差不多，就点击确认创建。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/H2E3pkbXVyoeuWS.png"                      alt="20240927092753-39f05ac833745e50a19d96c84b3d64d6.png"                ></p><p>来到这个页面就开始等：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/FjDVuazi69AHxmd.png"                      alt="20240927092906-c3c76a7f3b0db3bbd6d0f2b9be22929a.png"                ></p><p>一般2分钟左右，慢的也就10分钟<br>看到这个界面就说明服务器创建成功了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/mGyBKLq82MksrDT.jpg"                      alt="20240927093010-23be27ddb8e05e359dfe1686163b2a29.jpg"                ></p><p>接下来就开始上传服务端。<br>先去下载整合包：<br><a class="link"   href="https://www.minebbs.com/resources/1-21-1-21-1-leaves-tpa-home.9012/" >https://www.minebbs.com/resources/1-21-1-21-1-leaves-tpa-home.9012/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p><p>记得下载最新版：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/9hDQxGsKLwUcOVd.jpg"                      alt="20240927091308-427f492a856bf8b1b1a8c1adf1bab458.jpg"                ></p><p><del>123盘有点慢</del><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/vFMI4VgbZqP8cJh.png"                      alt="20240927093343-6f0eaebabd927d89e86c83778a0e5bec.png"                ></p><p>下载完成之后。上传文件：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/fU2FNMjCpDWnwRb.png"                      alt="20240927093607-f3ef5d33eef5c6727549ca49808f70e7.png"                ></p><p>上传文件的方法是点击“文件”，点“+”号，点“上传文件”<br>上传速度有点慢。别急，慢慢等。</p><p>点击解压：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/HkfL5UBdzGxTyb1.png"                      alt="20240927093827-7a79329ed60568299a9ec316be160465.png"                ></p><p>解压完成之后有点杂：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/M5E8QkfGRjV1uDz.jpg"                      alt="20240927093934-56806abf8a30052417423fc431af9e31.jpg"                ></p><p>可以看到有两个启动脚本，分别是start.sh</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动变量说明，修改前务必查看</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">https://www.yuque.com/simpfun/sfe/startup</span></span><br><span class="line"></span><br><span class="line">openjdk8=&quot;/usr/bin/jdk/jdk1.8.0_361/bin/java&quot;</span><br><span class="line">openjdk11=&quot;/usr/bin/jdk/jdk-11.0.18/bin/java&quot;</span><br><span class="line">openjdk17=&quot;/usr/bin/jdk/jdk-17.0.6/bin/java&quot;</span><br><span class="line">openjdk19=&quot;/usr/bin/jdk/jdk-19.0.2/bin/java&quot;</span><br><span class="line">openjdk21=&quot;/usr/bin/jdk/jdk-21.0.2/bin/java&quot;</span><br><span class="line"></span><br><span class="line">maxmem=$((SERVER_MEMORY - 1000))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：使用JDK17 启动server-release.jar</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="variable">$&#123;openjdk17&#125;</span> -Xms1024M -Xmx<span class="variable">$&#123;maxmem&#125;</span>M -jar server-release.jar nogui</span></span><br><span class="line">echo &quot;您需要修改start.sh文件来配置您的启动参数&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>和启动服务器.sh</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置脚本名称</span></span><br><span class="line">SCRIPT_NAME=&quot;柠枺生电互通基础端&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否已安装Java 21</span></span><br><span class="line"></span><br><span class="line">echo &quot;请确保你使用的是Java 21环境。&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提醒用户分配好内存了吗？</span></span><br><span class="line">echo &quot;分配好内存了吗？，设好可以删除或注释掉下面这一行。 &quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务器</span></span><br><span class="line">java -Xmx4G -jar leaves-1.21.1.jar nogui</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请按任意键继续</span></span><br><span class="line">read -rsp $&#x27;按任意键继续...\n&#x27; -d &#x27;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>把s<code>启动服务器.sh</code>删了。重新编辑start.sh，删掉里面的所有内容改成：</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">openjdk8=&quot;/usr/bin/jdk/jdk1.8.0_361/bin/java&quot;</span><br><span class="line">openjdk11=&quot;/usr/bin/jdk/jdk-11.0.18/bin/java&quot;</span><br><span class="line">openjdk17=&quot;/usr/bin/jdk/jdk-17.0.6/bin/java&quot;</span><br><span class="line">openjdk19=&quot;/usr/bin/jdk/jdk-19.0.2/bin/java&quot;</span><br><span class="line">openjdk21=&quot;/usr/bin/jdk/jdk-21.0.2/bin/java&quot;</span><br><span class="line"></span><br><span class="line">maxmem=$((SERVER_MEMORY - 1000))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;openjdk21&#125; -Xms1024M -Xmx<span class="variable">$&#123;maxmem&#125;</span>M -jar leaves-1.21.1.jar nogui</span></span><br></pre></td></tr></table></figure></div><p>保存，开服。</p><p>出现这个：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2024/09/27/vNcU8szpkDJfGEe.png"                      alt="20240927100224-95bb0b15779f0308e04ccefa1a301925.png"                ></p><p>这句说明你开服成功了。等待下载完成就会自动开服。尽情游玩你的服务器吧～</p><blockquote><p>梦泽Hexo文章模板</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;国庆节快到了，这里梦泽提前祝大家国庆节快乐&lt;br&gt;七天小长假说短不短，说长不长。刚好够开一个minecraft互通联机服务器。&lt;br&gt;于是就有很多宅家腐竹想开一个服务器，但苦于没钱而且不会开服。&lt;br&gt;这里梦泽就来说一下如何使用简幻欢免费开一个Minecraft互通(基岩版</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://yzeblog.dev.tc/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="简幻欢" scheme="https://yzeblog.dev.tc/tags/%E7%AE%80%E5%B9%BB%E6%AC%A2/"/>
    
    <category term="Leaves" scheme="https://yzeblog.dev.tc/tags/Leaves/"/>
    
    <category term="免费开服" scheme="https://yzeblog.dev.tc/tags/%E5%85%8D%E8%B4%B9%E5%BC%80%E6%9C%8D/"/>
    
  </entry>
  
</feed>
